// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2020 06:22:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control_vlg_sample_tst(
	Clock,
	ResetSystem,
	sampler_tx
);
input  Clock;
input  ResetSystem;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or ResetSystem)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Control_vlg_check_tst (
	Ena_Mp,
	Estados,
	Incremente,
	PC_DirMP_Enable,
	sampler_rx
);
input  Ena_Mp;
input [5:0] Estados;
input  Incremente;
input  PC_DirMP_Enable;
input sampler_rx;

reg  Ena_Mp_expected;
reg [5:0] Estados_expected;
reg  Incremente_expected;
reg  PC_DirMP_Enable_expected;

reg  Ena_Mp_prev;
reg [5:0] Estados_prev;
reg  Incremente_prev;
reg  PC_DirMP_Enable_prev;

reg  Ena_Mp_expected_prev;
reg [5:0] Estados_expected_prev;
reg  Incremente_expected_prev;
reg  PC_DirMP_Enable_expected_prev;

reg  last_Ena_Mp_exp;
reg [5:0] last_Estados_exp;
reg  last_Incremente_exp;
reg  last_PC_DirMP_Enable_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ena_Mp_prev = Ena_Mp;
	Estados_prev = Estados;
	Incremente_prev = Incremente;
	PC_DirMP_Enable_prev = PC_DirMP_Enable;
end

// update expected /o prevs

always @(trigger)
begin
	Ena_Mp_expected_prev = Ena_Mp_expected;
	Estados_expected_prev = Estados_expected;
	Incremente_expected_prev = Incremente_expected;
	PC_DirMP_Enable_expected_prev = PC_DirMP_Enable_expected;
end



// expected Ena_Mp
initial
begin
	Ena_Mp_expected = 1'bX;
end 
// expected Estados[ 5 ]
initial
begin
	Estados_expected[5] = 1'bX;
end 
// expected Estados[ 4 ]
initial
begin
	Estados_expected[4] = 1'bX;
end 
// expected Estados[ 3 ]
initial
begin
	Estados_expected[3] = 1'bX;
end 
// expected Estados[ 2 ]
initial
begin
	Estados_expected[2] = 1'bX;
end 
// expected Estados[ 1 ]
initial
begin
	Estados_expected[1] = 1'bX;
end 
// expected Estados[ 0 ]
initial
begin
	Estados_expected[0] = 1'bX;
end 

// expected Incremente
initial
begin
	Incremente_expected = 1'bX;
end 

// expected PC_DirMP_Enable
initial
begin
	PC_DirMP_Enable_expected = 1'bX;
end 
// generate trigger
always @(Ena_Mp_expected or Ena_Mp or Estados_expected or Estados or Incremente_expected or Incremente or PC_DirMP_Enable_expected or PC_DirMP_Enable)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ena_Mp = %b | expected Estados = %b | expected Incremente = %b | expected PC_DirMP_Enable = %b | ",Ena_Mp_expected_prev,Estados_expected_prev,Incremente_expected_prev,PC_DirMP_Enable_expected_prev);
	$display("| real Ena_Mp = %b | real Estados = %b | real Incremente = %b | real PC_DirMP_Enable = %b | ",Ena_Mp_prev,Estados_prev,Incremente_prev,PC_DirMP_Enable_prev);
`endif
	if (
		( Ena_Mp_expected_prev !== 1'bx ) && ( Ena_Mp_prev !== Ena_Mp_expected_prev )
		&& ((Ena_Mp_expected_prev !== last_Ena_Mp_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ena_Mp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ena_Mp_expected_prev);
		$display ("     Real value = %b", Ena_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ena_Mp_exp = Ena_Mp_expected_prev;
	end
	if (
		( Estados_expected_prev[0] !== 1'bx ) && ( Estados_prev[0] !== Estados_expected_prev[0] )
		&& ((Estados_expected_prev[0] !== last_Estados_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Estados_exp[0] = Estados_expected_prev[0];
	end
	if (
		( Estados_expected_prev[1] !== 1'bx ) && ( Estados_prev[1] !== Estados_expected_prev[1] )
		&& ((Estados_expected_prev[1] !== last_Estados_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Estados_exp[1] = Estados_expected_prev[1];
	end
	if (
		( Estados_expected_prev[2] !== 1'bx ) && ( Estados_prev[2] !== Estados_expected_prev[2] )
		&& ((Estados_expected_prev[2] !== last_Estados_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Estados_exp[2] = Estados_expected_prev[2];
	end
	if (
		( Estados_expected_prev[3] !== 1'bx ) && ( Estados_prev[3] !== Estados_expected_prev[3] )
		&& ((Estados_expected_prev[3] !== last_Estados_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Estados_exp[3] = Estados_expected_prev[3];
	end
	if (
		( Estados_expected_prev[4] !== 1'bx ) && ( Estados_prev[4] !== Estados_expected_prev[4] )
		&& ((Estados_expected_prev[4] !== last_Estados_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Estados_exp[4] = Estados_expected_prev[4];
	end
	if (
		( Estados_expected_prev[5] !== 1'bx ) && ( Estados_prev[5] !== Estados_expected_prev[5] )
		&& ((Estados_expected_prev[5] !== last_Estados_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Estados_exp[5] = Estados_expected_prev[5];
	end
	if (
		( Incremente_expected_prev !== 1'bx ) && ( Incremente_prev !== Incremente_expected_prev )
		&& ((Incremente_expected_prev !== last_Incremente_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Incremente :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Incremente_expected_prev);
		$display ("     Real value = %b", Incremente_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Incremente_exp = Incremente_expected_prev;
	end
	if (
		( PC_DirMP_Enable_expected_prev !== 1'bx ) && ( PC_DirMP_Enable_prev !== PC_DirMP_Enable_expected_prev )
		&& ((PC_DirMP_Enable_expected_prev !== last_PC_DirMP_Enable_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_DirMP_Enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_DirMP_Enable_expected_prev);
		$display ("     Real value = %b", PC_DirMP_Enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_DirMP_Enable_exp = PC_DirMP_Enable_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg ResetSystem;
// wires                                               
wire Ena_Mp;
wire [5:0] Estados;
wire Incremente;
wire PC_DirMP_Enable;

wire sampler;                             

// assign statements (if any)                          
Control i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Ena_Mp(Ena_Mp),
	.Estados(Estados),
	.Incremente(Incremente),
	.PC_DirMP_Enable(PC_DirMP_Enable),
	.ResetSystem(ResetSystem)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// ResetSystem
initial
begin
	ResetSystem = 1'b1;
end 

Control_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.ResetSystem(ResetSystem),
	.sampler_tx(sampler)
);

Control_vlg_check_tst tb_out(
	.Ena_Mp(Ena_Mp),
	.Estados(Estados),
	.Incremente(Incremente),
	.PC_DirMP_Enable(PC_DirMP_Enable),
	.sampler_rx(sampler)
);
endmodule

