// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2020 10:27:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    GeneralPR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GeneralPR_vlg_sample_tst(
	Clock,
	InGPR,
	ResetSystem,
	Save_GPR,
	sampler_tx
);
input  Clock;
input [22:0] InGPR;
input  ResetSystem;
input  Save_GPR;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or InGPR or ResetSystem or Save_GPR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module GeneralPR_vlg_check_tst (
	DataGPR,
	ModeGPR,
	OpGPR,
	sampler_rx
);
input [15:0] DataGPR;
input [1:0] ModeGPR;
input [4:0] OpGPR;
input sampler_rx;

reg [15:0] DataGPR_expected;
reg [1:0] ModeGPR_expected;
reg [4:0] OpGPR_expected;

reg [15:0] DataGPR_prev;
reg [1:0] ModeGPR_prev;
reg [4:0] OpGPR_prev;

reg [15:0] DataGPR_expected_prev;
reg [1:0] ModeGPR_expected_prev;
reg [4:0] OpGPR_expected_prev;

reg [15:0] last_DataGPR_exp;
reg [1:0] last_ModeGPR_exp;
reg [4:0] last_OpGPR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	DataGPR_prev = DataGPR;
	ModeGPR_prev = ModeGPR;
	OpGPR_prev = OpGPR;
end

// update expected /o prevs

always @(trigger)
begin
	DataGPR_expected_prev = DataGPR_expected;
	ModeGPR_expected_prev = ModeGPR_expected;
	OpGPR_expected_prev = OpGPR_expected;
end


// expected ModeGPR[ 1 ]
initial
begin
	ModeGPR_expected[1] = 1'bX;
end 
// expected ModeGPR[ 0 ]
initial
begin
	ModeGPR_expected[0] = 1'bX;
end 
// expected OpGPR[ 4 ]
initial
begin
	OpGPR_expected[4] = 1'bX;
end 
// expected OpGPR[ 3 ]
initial
begin
	OpGPR_expected[3] = 1'bX;
end 
// expected OpGPR[ 2 ]
initial
begin
	OpGPR_expected[2] = 1'bX;
end 
// expected OpGPR[ 1 ]
initial
begin
	OpGPR_expected[1] = 1'bX;
end 
// expected OpGPR[ 0 ]
initial
begin
	OpGPR_expected[0] = 1'bX;
end 
// expected DataGPR[ 15 ]
initial
begin
	DataGPR_expected[15] = 1'bX;
end 
// expected DataGPR[ 14 ]
initial
begin
	DataGPR_expected[14] = 1'bX;
end 
// expected DataGPR[ 13 ]
initial
begin
	DataGPR_expected[13] = 1'bX;
end 
// expected DataGPR[ 12 ]
initial
begin
	DataGPR_expected[12] = 1'bX;
end 
// expected DataGPR[ 11 ]
initial
begin
	DataGPR_expected[11] = 1'bX;
end 
// expected DataGPR[ 10 ]
initial
begin
	DataGPR_expected[10] = 1'bX;
end 
// expected DataGPR[ 9 ]
initial
begin
	DataGPR_expected[9] = 1'bX;
end 
// expected DataGPR[ 8 ]
initial
begin
	DataGPR_expected[8] = 1'bX;
end 
// expected DataGPR[ 7 ]
initial
begin
	DataGPR_expected[7] = 1'bX;
end 
// expected DataGPR[ 6 ]
initial
begin
	DataGPR_expected[6] = 1'bX;
end 
// expected DataGPR[ 5 ]
initial
begin
	DataGPR_expected[5] = 1'bX;
end 
// expected DataGPR[ 4 ]
initial
begin
	DataGPR_expected[4] = 1'bX;
end 
// expected DataGPR[ 3 ]
initial
begin
	DataGPR_expected[3] = 1'bX;
end 
// expected DataGPR[ 2 ]
initial
begin
	DataGPR_expected[2] = 1'bX;
end 
// expected DataGPR[ 1 ]
initial
begin
	DataGPR_expected[1] = 1'bX;
end 
// expected DataGPR[ 0 ]
initial
begin
	DataGPR_expected[0] = 1'bX;
end 
// generate trigger
always @(DataGPR_expected or DataGPR or ModeGPR_expected or ModeGPR or OpGPR_expected or OpGPR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DataGPR = %b | expected ModeGPR = %b | expected OpGPR = %b | ",DataGPR_expected_prev,ModeGPR_expected_prev,OpGPR_expected_prev);
	$display("| real DataGPR = %b | real ModeGPR = %b | real OpGPR = %b | ",DataGPR_prev,ModeGPR_prev,OpGPR_prev);
`endif
	if (
		( DataGPR_expected_prev[0] !== 1'bx ) && ( DataGPR_prev[0] !== DataGPR_expected_prev[0] )
		&& ((DataGPR_expected_prev[0] !== last_DataGPR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[0] = DataGPR_expected_prev[0];
	end
	if (
		( DataGPR_expected_prev[1] !== 1'bx ) && ( DataGPR_prev[1] !== DataGPR_expected_prev[1] )
		&& ((DataGPR_expected_prev[1] !== last_DataGPR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[1] = DataGPR_expected_prev[1];
	end
	if (
		( DataGPR_expected_prev[2] !== 1'bx ) && ( DataGPR_prev[2] !== DataGPR_expected_prev[2] )
		&& ((DataGPR_expected_prev[2] !== last_DataGPR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[2] = DataGPR_expected_prev[2];
	end
	if (
		( DataGPR_expected_prev[3] !== 1'bx ) && ( DataGPR_prev[3] !== DataGPR_expected_prev[3] )
		&& ((DataGPR_expected_prev[3] !== last_DataGPR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[3] = DataGPR_expected_prev[3];
	end
	if (
		( DataGPR_expected_prev[4] !== 1'bx ) && ( DataGPR_prev[4] !== DataGPR_expected_prev[4] )
		&& ((DataGPR_expected_prev[4] !== last_DataGPR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[4] = DataGPR_expected_prev[4];
	end
	if (
		( DataGPR_expected_prev[5] !== 1'bx ) && ( DataGPR_prev[5] !== DataGPR_expected_prev[5] )
		&& ((DataGPR_expected_prev[5] !== last_DataGPR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[5] = DataGPR_expected_prev[5];
	end
	if (
		( DataGPR_expected_prev[6] !== 1'bx ) && ( DataGPR_prev[6] !== DataGPR_expected_prev[6] )
		&& ((DataGPR_expected_prev[6] !== last_DataGPR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[6] = DataGPR_expected_prev[6];
	end
	if (
		( DataGPR_expected_prev[7] !== 1'bx ) && ( DataGPR_prev[7] !== DataGPR_expected_prev[7] )
		&& ((DataGPR_expected_prev[7] !== last_DataGPR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[7] = DataGPR_expected_prev[7];
	end
	if (
		( DataGPR_expected_prev[8] !== 1'bx ) && ( DataGPR_prev[8] !== DataGPR_expected_prev[8] )
		&& ((DataGPR_expected_prev[8] !== last_DataGPR_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[8] = DataGPR_expected_prev[8];
	end
	if (
		( DataGPR_expected_prev[9] !== 1'bx ) && ( DataGPR_prev[9] !== DataGPR_expected_prev[9] )
		&& ((DataGPR_expected_prev[9] !== last_DataGPR_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[9] = DataGPR_expected_prev[9];
	end
	if (
		( DataGPR_expected_prev[10] !== 1'bx ) && ( DataGPR_prev[10] !== DataGPR_expected_prev[10] )
		&& ((DataGPR_expected_prev[10] !== last_DataGPR_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[10] = DataGPR_expected_prev[10];
	end
	if (
		( DataGPR_expected_prev[11] !== 1'bx ) && ( DataGPR_prev[11] !== DataGPR_expected_prev[11] )
		&& ((DataGPR_expected_prev[11] !== last_DataGPR_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[11] = DataGPR_expected_prev[11];
	end
	if (
		( DataGPR_expected_prev[12] !== 1'bx ) && ( DataGPR_prev[12] !== DataGPR_expected_prev[12] )
		&& ((DataGPR_expected_prev[12] !== last_DataGPR_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[12] = DataGPR_expected_prev[12];
	end
	if (
		( DataGPR_expected_prev[13] !== 1'bx ) && ( DataGPR_prev[13] !== DataGPR_expected_prev[13] )
		&& ((DataGPR_expected_prev[13] !== last_DataGPR_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[13] = DataGPR_expected_prev[13];
	end
	if (
		( DataGPR_expected_prev[14] !== 1'bx ) && ( DataGPR_prev[14] !== DataGPR_expected_prev[14] )
		&& ((DataGPR_expected_prev[14] !== last_DataGPR_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[14] = DataGPR_expected_prev[14];
	end
	if (
		( DataGPR_expected_prev[15] !== 1'bx ) && ( DataGPR_prev[15] !== DataGPR_expected_prev[15] )
		&& ((DataGPR_expected_prev[15] !== last_DataGPR_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataGPR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataGPR_expected_prev);
		$display ("     Real value = %b", DataGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataGPR_exp[15] = DataGPR_expected_prev[15];
	end
	if (
		( ModeGPR_expected_prev[0] !== 1'bx ) && ( ModeGPR_prev[0] !== ModeGPR_expected_prev[0] )
		&& ((ModeGPR_expected_prev[0] !== last_ModeGPR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ModeGPR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ModeGPR_expected_prev);
		$display ("     Real value = %b", ModeGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ModeGPR_exp[0] = ModeGPR_expected_prev[0];
	end
	if (
		( ModeGPR_expected_prev[1] !== 1'bx ) && ( ModeGPR_prev[1] !== ModeGPR_expected_prev[1] )
		&& ((ModeGPR_expected_prev[1] !== last_ModeGPR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ModeGPR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ModeGPR_expected_prev);
		$display ("     Real value = %b", ModeGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ModeGPR_exp[1] = ModeGPR_expected_prev[1];
	end
	if (
		( OpGPR_expected_prev[0] !== 1'bx ) && ( OpGPR_prev[0] !== OpGPR_expected_prev[0] )
		&& ((OpGPR_expected_prev[0] !== last_OpGPR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpGPR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpGPR_expected_prev);
		$display ("     Real value = %b", OpGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OpGPR_exp[0] = OpGPR_expected_prev[0];
	end
	if (
		( OpGPR_expected_prev[1] !== 1'bx ) && ( OpGPR_prev[1] !== OpGPR_expected_prev[1] )
		&& ((OpGPR_expected_prev[1] !== last_OpGPR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpGPR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpGPR_expected_prev);
		$display ("     Real value = %b", OpGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OpGPR_exp[1] = OpGPR_expected_prev[1];
	end
	if (
		( OpGPR_expected_prev[2] !== 1'bx ) && ( OpGPR_prev[2] !== OpGPR_expected_prev[2] )
		&& ((OpGPR_expected_prev[2] !== last_OpGPR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpGPR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpGPR_expected_prev);
		$display ("     Real value = %b", OpGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OpGPR_exp[2] = OpGPR_expected_prev[2];
	end
	if (
		( OpGPR_expected_prev[3] !== 1'bx ) && ( OpGPR_prev[3] !== OpGPR_expected_prev[3] )
		&& ((OpGPR_expected_prev[3] !== last_OpGPR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpGPR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpGPR_expected_prev);
		$display ("     Real value = %b", OpGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OpGPR_exp[3] = OpGPR_expected_prev[3];
	end
	if (
		( OpGPR_expected_prev[4] !== 1'bx ) && ( OpGPR_prev[4] !== OpGPR_expected_prev[4] )
		&& ((OpGPR_expected_prev[4] !== last_OpGPR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpGPR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpGPR_expected_prev);
		$display ("     Real value = %b", OpGPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OpGPR_exp[4] = OpGPR_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module GeneralPR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [22:0] InGPR;
reg ResetSystem;
reg Save_GPR;
// wires                                               
wire [15:0] DataGPR;
wire [1:0] ModeGPR;
wire [4:0] OpGPR;

wire sampler;                             

// assign statements (if any)                          
GeneralPR i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.DataGPR(DataGPR),
	.InGPR(InGPR),
	.ModeGPR(ModeGPR),
	.OpGPR(OpGPR),
	.ResetSystem(ResetSystem),
	.Save_GPR(Save_GPR)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// ResetSystem
initial
begin
	ResetSystem = 1'b1;
end 

// Save_GPR
initial
begin
	Save_GPR = 1'b0;
	Save_GPR = #330000 1'b1;
	Save_GPR = #20000 1'b0;
end 
// InGPR[ 22 ]
initial
begin
	InGPR[22] = 1'b0;
end 
// InGPR[ 21 ]
initial
begin
	InGPR[21] = 1'b0;
end 
// InGPR[ 20 ]
initial
begin
	InGPR[20] = 1'b1;
end 
// InGPR[ 19 ]
initial
begin
	InGPR[19] = 1'b0;
end 
// InGPR[ 18 ]
initial
begin
	InGPR[18] = 1'b0;
end 
// InGPR[ 17 ]
initial
begin
	InGPR[17] = 1'b1;
end 
// InGPR[ 16 ]
initial
begin
	InGPR[16] = 1'b1;
end 
// InGPR[ 15 ]
initial
begin
	InGPR[15] = 1'b1;
end 
// InGPR[ 14 ]
initial
begin
	InGPR[14] = 1'b1;
end 
// InGPR[ 13 ]
initial
begin
	InGPR[13] = 1'b1;
end 
// InGPR[ 12 ]
initial
begin
	InGPR[12] = 1'b1;
end 
// InGPR[ 11 ]
initial
begin
	InGPR[11] = 1'b1;
end 
// InGPR[ 10 ]
initial
begin
	InGPR[10] = 1'b1;
end 
// InGPR[ 9 ]
initial
begin
	InGPR[9] = 1'b1;
end 
// InGPR[ 8 ]
initial
begin
	InGPR[8] = 1'b1;
end 
// InGPR[ 7 ]
initial
begin
	InGPR[7] = 1'b1;
end 
// InGPR[ 6 ]
initial
begin
	InGPR[6] = 1'b1;
end 
// InGPR[ 5 ]
initial
begin
	InGPR[5] = 1'b1;
end 
// InGPR[ 4 ]
initial
begin
	InGPR[4] = 1'b1;
end 
// InGPR[ 3 ]
initial
begin
	InGPR[3] = 1'b0;
end 
// InGPR[ 2 ]
initial
begin
	InGPR[2] = 1'b0;
end 
// InGPR[ 1 ]
initial
begin
	InGPR[1] = 1'b0;
end 
// InGPR[ 0 ]
initial
begin
	InGPR[0] = 1'b0;
end 

GeneralPR_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.InGPR(InGPR),
	.ResetSystem(ResetSystem),
	.Save_GPR(Save_GPR),
	.sampler_tx(sampler)
);

GeneralPR_vlg_check_tst tb_out(
	.DataGPR(DataGPR),
	.ModeGPR(ModeGPR),
	.OpGPR(OpGPR),
	.sampler_rx(sampler)
);
endmodule

