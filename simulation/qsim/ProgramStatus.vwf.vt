// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2020 23:49:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ProgramStatus
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProgramStatus_vlg_sample_tst(
	Banderas,
	Clock,
	IntE,
	ResetSystem,
	SaveB,
	SaveInt,
	sampler_tx
);
input [3:0] Banderas;
input  Clock;
input  IntE;
input  ResetSystem;
input  SaveB;
input  SaveInt;
output sampler_tx;

reg sample;
time current_time;
always @(Banderas or Clock or IntE or ResetSystem or SaveB or SaveInt)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ProgramStatus_vlg_check_tst (
	StatusR,
	sampler_rx
);
input [4:0] StatusR;
input sampler_rx;

reg [4:0] StatusR_expected;

reg [4:0] StatusR_prev;

reg [4:0] StatusR_expected_prev;

reg [4:0] last_StatusR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	StatusR_prev = StatusR;
end

// update expected /o prevs

always @(trigger)
begin
	StatusR_expected_prev = StatusR_expected;
end


// expected StatusR[ 4 ]
initial
begin
	StatusR_expected[4] = 1'bX;
end 
// expected StatusR[ 3 ]
initial
begin
	StatusR_expected[3] = 1'bX;
end 
// expected StatusR[ 2 ]
initial
begin
	StatusR_expected[2] = 1'bX;
end 
// expected StatusR[ 1 ]
initial
begin
	StatusR_expected[1] = 1'bX;
end 
// expected StatusR[ 0 ]
initial
begin
	StatusR_expected[0] = 1'bX;
end 
// generate trigger
always @(StatusR_expected or StatusR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected StatusR = %b | ",StatusR_expected_prev);
	$display("| real StatusR = %b | ",StatusR_prev);
`endif
	if (
		( StatusR_expected_prev[0] !== 1'bx ) && ( StatusR_prev[0] !== StatusR_expected_prev[0] )
		&& ((StatusR_expected_prev[0] !== last_StatusR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StatusR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StatusR_expected_prev);
		$display ("     Real value = %b", StatusR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_StatusR_exp[0] = StatusR_expected_prev[0];
	end
	if (
		( StatusR_expected_prev[1] !== 1'bx ) && ( StatusR_prev[1] !== StatusR_expected_prev[1] )
		&& ((StatusR_expected_prev[1] !== last_StatusR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StatusR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StatusR_expected_prev);
		$display ("     Real value = %b", StatusR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_StatusR_exp[1] = StatusR_expected_prev[1];
	end
	if (
		( StatusR_expected_prev[2] !== 1'bx ) && ( StatusR_prev[2] !== StatusR_expected_prev[2] )
		&& ((StatusR_expected_prev[2] !== last_StatusR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StatusR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StatusR_expected_prev);
		$display ("     Real value = %b", StatusR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_StatusR_exp[2] = StatusR_expected_prev[2];
	end
	if (
		( StatusR_expected_prev[3] !== 1'bx ) && ( StatusR_prev[3] !== StatusR_expected_prev[3] )
		&& ((StatusR_expected_prev[3] !== last_StatusR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StatusR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StatusR_expected_prev);
		$display ("     Real value = %b", StatusR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_StatusR_exp[3] = StatusR_expected_prev[3];
	end
	if (
		( StatusR_expected_prev[4] !== 1'bx ) && ( StatusR_prev[4] !== StatusR_expected_prev[4] )
		&& ((StatusR_expected_prev[4] !== last_StatusR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StatusR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StatusR_expected_prev);
		$display ("     Real value = %b", StatusR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_StatusR_exp[4] = StatusR_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ProgramStatus_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Banderas;
reg Clock;
reg IntE;
reg ResetSystem;
reg SaveB;
reg SaveInt;
// wires                                               
wire [4:0] StatusR;

wire sampler;                             

// assign statements (if any)                          
ProgramStatus i1 (
// port map - connection between master ports and signals/registers   
	.Banderas(Banderas),
	.Clock(Clock),
	.IntE(IntE),
	.ResetSystem(ResetSystem),
	.SaveB(SaveB),
	.SaveInt(SaveInt),
	.StatusR(StatusR)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// ResetSystem
initial
begin
	ResetSystem = 1'b1;
end 
// Banderas[ 3 ]
initial
begin
	Banderas[3] = 1'b1;
end 
// Banderas[ 2 ]
initial
begin
	Banderas[2] = 1'b1;
end 
// Banderas[ 1 ]
initial
begin
	Banderas[1] = 1'b1;
end 
// Banderas[ 0 ]
initial
begin
	Banderas[0] = 1'b1;
end 

// IntE
initial
begin
	IntE = 1'b0;
end 

// SaveB
initial
begin
	SaveB = 1'b1;
end 

// SaveInt
initial
begin
	SaveInt = 1'b0;
end 

ProgramStatus_vlg_sample_tst tb_sample (
	.Banderas(Banderas),
	.Clock(Clock),
	.IntE(IntE),
	.ResetSystem(ResetSystem),
	.SaveB(SaveB),
	.SaveInt(SaveInt),
	.sampler_tx(sampler)
);

ProgramStatus_vlg_check_tst tb_out(
	.StatusR(StatusR),
	.sampler_rx(sampler)
);
endmodule

