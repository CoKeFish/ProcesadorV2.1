// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2020 21:51:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Data_MdMux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Data_MdMux_vlg_sample_tst(
	ACOut,
	DirMd,
	GPROut,
	PSROut,
	SelectDataMd,
	sampler_tx
);
input [15:0] ACOut;
input [15:0] DirMd;
input [15:0] GPROut;
input [15:0] PSROut;
input [1:0] SelectDataMd;
output sampler_tx;

reg sample;
time current_time;
always @(ACOut or DirMd or GPROut or PSROut or SelectDataMd)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Data_MdMux_vlg_check_tst (
	DatOut_Md,
	sampler_rx
);
input [15:0] DatOut_Md;
input sampler_rx;

reg [15:0] DatOut_Md_expected;

reg [15:0] DatOut_Md_prev;

reg [15:0] DatOut_Md_expected_prev;

reg [15:0] last_DatOut_Md_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DatOut_Md_prev = DatOut_Md;
end

// update expected /o prevs

always @(trigger)
begin
	DatOut_Md_expected_prev = DatOut_Md_expected;
end


// expected DatOut_Md[ 15 ]
initial
begin
	DatOut_Md_expected[15] = 1'bX;
end 
// expected DatOut_Md[ 14 ]
initial
begin
	DatOut_Md_expected[14] = 1'bX;
end 
// expected DatOut_Md[ 13 ]
initial
begin
	DatOut_Md_expected[13] = 1'bX;
end 
// expected DatOut_Md[ 12 ]
initial
begin
	DatOut_Md_expected[12] = 1'bX;
end 
// expected DatOut_Md[ 11 ]
initial
begin
	DatOut_Md_expected[11] = 1'bX;
end 
// expected DatOut_Md[ 10 ]
initial
begin
	DatOut_Md_expected[10] = 1'bX;
end 
// expected DatOut_Md[ 9 ]
initial
begin
	DatOut_Md_expected[9] = 1'bX;
end 
// expected DatOut_Md[ 8 ]
initial
begin
	DatOut_Md_expected[8] = 1'bX;
end 
// expected DatOut_Md[ 7 ]
initial
begin
	DatOut_Md_expected[7] = 1'bX;
end 
// expected DatOut_Md[ 6 ]
initial
begin
	DatOut_Md_expected[6] = 1'bX;
end 
// expected DatOut_Md[ 5 ]
initial
begin
	DatOut_Md_expected[5] = 1'bX;
end 
// expected DatOut_Md[ 4 ]
initial
begin
	DatOut_Md_expected[4] = 1'bX;
end 
// expected DatOut_Md[ 3 ]
initial
begin
	DatOut_Md_expected[3] = 1'bX;
end 
// expected DatOut_Md[ 2 ]
initial
begin
	DatOut_Md_expected[2] = 1'bX;
end 
// expected DatOut_Md[ 1 ]
initial
begin
	DatOut_Md_expected[1] = 1'bX;
end 
// expected DatOut_Md[ 0 ]
initial
begin
	DatOut_Md_expected[0] = 1'bX;
end 
// generate trigger
always @(DatOut_Md_expected or DatOut_Md)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DatOut_Md = %b | ",DatOut_Md_expected_prev);
	$display("| real DatOut_Md = %b | ",DatOut_Md_prev);
`endif
	if (
		( DatOut_Md_expected_prev[0] !== 1'bx ) && ( DatOut_Md_prev[0] !== DatOut_Md_expected_prev[0] )
		&& ((DatOut_Md_expected_prev[0] !== last_DatOut_Md_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[0] = DatOut_Md_expected_prev[0];
	end
	if (
		( DatOut_Md_expected_prev[1] !== 1'bx ) && ( DatOut_Md_prev[1] !== DatOut_Md_expected_prev[1] )
		&& ((DatOut_Md_expected_prev[1] !== last_DatOut_Md_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[1] = DatOut_Md_expected_prev[1];
	end
	if (
		( DatOut_Md_expected_prev[2] !== 1'bx ) && ( DatOut_Md_prev[2] !== DatOut_Md_expected_prev[2] )
		&& ((DatOut_Md_expected_prev[2] !== last_DatOut_Md_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[2] = DatOut_Md_expected_prev[2];
	end
	if (
		( DatOut_Md_expected_prev[3] !== 1'bx ) && ( DatOut_Md_prev[3] !== DatOut_Md_expected_prev[3] )
		&& ((DatOut_Md_expected_prev[3] !== last_DatOut_Md_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[3] = DatOut_Md_expected_prev[3];
	end
	if (
		( DatOut_Md_expected_prev[4] !== 1'bx ) && ( DatOut_Md_prev[4] !== DatOut_Md_expected_prev[4] )
		&& ((DatOut_Md_expected_prev[4] !== last_DatOut_Md_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[4] = DatOut_Md_expected_prev[4];
	end
	if (
		( DatOut_Md_expected_prev[5] !== 1'bx ) && ( DatOut_Md_prev[5] !== DatOut_Md_expected_prev[5] )
		&& ((DatOut_Md_expected_prev[5] !== last_DatOut_Md_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[5] = DatOut_Md_expected_prev[5];
	end
	if (
		( DatOut_Md_expected_prev[6] !== 1'bx ) && ( DatOut_Md_prev[6] !== DatOut_Md_expected_prev[6] )
		&& ((DatOut_Md_expected_prev[6] !== last_DatOut_Md_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[6] = DatOut_Md_expected_prev[6];
	end
	if (
		( DatOut_Md_expected_prev[7] !== 1'bx ) && ( DatOut_Md_prev[7] !== DatOut_Md_expected_prev[7] )
		&& ((DatOut_Md_expected_prev[7] !== last_DatOut_Md_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[7] = DatOut_Md_expected_prev[7];
	end
	if (
		( DatOut_Md_expected_prev[8] !== 1'bx ) && ( DatOut_Md_prev[8] !== DatOut_Md_expected_prev[8] )
		&& ((DatOut_Md_expected_prev[8] !== last_DatOut_Md_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[8] = DatOut_Md_expected_prev[8];
	end
	if (
		( DatOut_Md_expected_prev[9] !== 1'bx ) && ( DatOut_Md_prev[9] !== DatOut_Md_expected_prev[9] )
		&& ((DatOut_Md_expected_prev[9] !== last_DatOut_Md_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[9] = DatOut_Md_expected_prev[9];
	end
	if (
		( DatOut_Md_expected_prev[10] !== 1'bx ) && ( DatOut_Md_prev[10] !== DatOut_Md_expected_prev[10] )
		&& ((DatOut_Md_expected_prev[10] !== last_DatOut_Md_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[10] = DatOut_Md_expected_prev[10];
	end
	if (
		( DatOut_Md_expected_prev[11] !== 1'bx ) && ( DatOut_Md_prev[11] !== DatOut_Md_expected_prev[11] )
		&& ((DatOut_Md_expected_prev[11] !== last_DatOut_Md_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[11] = DatOut_Md_expected_prev[11];
	end
	if (
		( DatOut_Md_expected_prev[12] !== 1'bx ) && ( DatOut_Md_prev[12] !== DatOut_Md_expected_prev[12] )
		&& ((DatOut_Md_expected_prev[12] !== last_DatOut_Md_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[12] = DatOut_Md_expected_prev[12];
	end
	if (
		( DatOut_Md_expected_prev[13] !== 1'bx ) && ( DatOut_Md_prev[13] !== DatOut_Md_expected_prev[13] )
		&& ((DatOut_Md_expected_prev[13] !== last_DatOut_Md_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[13] = DatOut_Md_expected_prev[13];
	end
	if (
		( DatOut_Md_expected_prev[14] !== 1'bx ) && ( DatOut_Md_prev[14] !== DatOut_Md_expected_prev[14] )
		&& ((DatOut_Md_expected_prev[14] !== last_DatOut_Md_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[14] = DatOut_Md_expected_prev[14];
	end
	if (
		( DatOut_Md_expected_prev[15] !== 1'bx ) && ( DatOut_Md_prev[15] !== DatOut_Md_expected_prev[15] )
		&& ((DatOut_Md_expected_prev[15] !== last_DatOut_Md_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DatOut_Md[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DatOut_Md_expected_prev);
		$display ("     Real value = %b", DatOut_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DatOut_Md_exp[15] = DatOut_Md_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Data_MdMux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] ACOut;
reg [15:0] DirMd;
reg [15:0] GPROut;
reg [15:0] PSROut;
reg [1:0] SelectDataMd;
// wires                                               
wire [15:0] DatOut_Md;

wire sampler;                             

// assign statements (if any)                          
Data_MdMux i1 (
// port map - connection between master ports and signals/registers   
	.ACOut(ACOut),
	.DatOut_Md(DatOut_Md),
	.DirMd(DirMd),
	.GPROut(GPROut),
	.PSROut(PSROut),
	.SelectDataMd(SelectDataMd)
);
// SelectDataMd[ 1 ]
always
begin
	SelectDataMd[1] = 1'b0;
	SelectDataMd[1] = #500000 1'b1;
	#500000;
end 
// SelectDataMd[ 0 ]
always
begin
	SelectDataMd[0] = 1'b0;
	SelectDataMd[0] = #250000 1'b1;
	#250000;
end 
// ACOut[ 15 ]
initial
begin
	ACOut[15] = 1'b1;
end 
// ACOut[ 14 ]
initial
begin
	ACOut[14] = 1'b1;
end 
// ACOut[ 13 ]
initial
begin
	ACOut[13] = 1'b1;
end 
// ACOut[ 12 ]
initial
begin
	ACOut[12] = 1'b1;
end 
// ACOut[ 11 ]
initial
begin
	ACOut[11] = 1'b0;
end 
// ACOut[ 10 ]
initial
begin
	ACOut[10] = 1'b0;
end 
// ACOut[ 9 ]
initial
begin
	ACOut[9] = 1'b0;
end 
// ACOut[ 8 ]
initial
begin
	ACOut[8] = 1'b0;
end 
// ACOut[ 7 ]
initial
begin
	ACOut[7] = 1'b0;
end 
// ACOut[ 6 ]
initial
begin
	ACOut[6] = 1'b0;
end 
// ACOut[ 5 ]
initial
begin
	ACOut[5] = 1'b0;
end 
// ACOut[ 4 ]
initial
begin
	ACOut[4] = 1'b0;
end 
// ACOut[ 3 ]
initial
begin
	ACOut[3] = 1'b0;
end 
// ACOut[ 2 ]
initial
begin
	ACOut[2] = 1'b0;
end 
// ACOut[ 1 ]
initial
begin
	ACOut[1] = 1'b0;
end 
// ACOut[ 0 ]
initial
begin
	ACOut[0] = 1'b0;
end 
// DirMd[ 15 ]
initial
begin
	DirMd[15] = 1'b0;
end 
// DirMd[ 14 ]
initial
begin
	DirMd[14] = 1'b0;
end 
// DirMd[ 13 ]
initial
begin
	DirMd[13] = 1'b0;
end 
// DirMd[ 12 ]
initial
begin
	DirMd[12] = 1'b0;
end 
// DirMd[ 11 ]
initial
begin
	DirMd[11] = 1'b0;
end 
// DirMd[ 10 ]
initial
begin
	DirMd[10] = 1'b0;
end 
// DirMd[ 9 ]
initial
begin
	DirMd[9] = 1'b0;
end 
// DirMd[ 8 ]
initial
begin
	DirMd[8] = 1'b0;
end 
// DirMd[ 7 ]
initial
begin
	DirMd[7] = 1'b0;
end 
// DirMd[ 6 ]
initial
begin
	DirMd[6] = 1'b0;
end 
// DirMd[ 5 ]
initial
begin
	DirMd[5] = 1'b0;
end 
// DirMd[ 4 ]
initial
begin
	DirMd[4] = 1'b1;
end 
// DirMd[ 3 ]
initial
begin
	DirMd[3] = 1'b1;
end 
// DirMd[ 2 ]
initial
begin
	DirMd[2] = 1'b1;
end 
// DirMd[ 1 ]
initial
begin
	DirMd[1] = 1'b1;
end 
// DirMd[ 0 ]
initial
begin
	DirMd[0] = 1'b1;
end 
// GPROut[ 15 ]
initial
begin
	GPROut[15] = 1'b0;
end 
// GPROut[ 14 ]
initial
begin
	GPROut[14] = 1'b0;
end 
// GPROut[ 13 ]
initial
begin
	GPROut[13] = 1'b0;
end 
// GPROut[ 12 ]
initial
begin
	GPROut[12] = 1'b0;
end 
// GPROut[ 11 ]
initial
begin
	GPROut[11] = 1'b0;
end 
// GPROut[ 10 ]
initial
begin
	GPROut[10] = 1'b1;
end 
// GPROut[ 9 ]
initial
begin
	GPROut[9] = 1'b1;
end 
// GPROut[ 8 ]
initial
begin
	GPROut[8] = 1'b1;
end 
// GPROut[ 7 ]
initial
begin
	GPROut[7] = 1'b1;
end 
// GPROut[ 6 ]
initial
begin
	GPROut[6] = 1'b0;
end 
// GPROut[ 5 ]
initial
begin
	GPROut[5] = 1'b0;
end 
// GPROut[ 4 ]
initial
begin
	GPROut[4] = 1'b0;
end 
// GPROut[ 3 ]
initial
begin
	GPROut[3] = 1'b0;
end 
// GPROut[ 2 ]
initial
begin
	GPROut[2] = 1'b0;
end 
// GPROut[ 1 ]
initial
begin
	GPROut[1] = 1'b0;
end 
// GPROut[ 0 ]
initial
begin
	GPROut[0] = 1'b0;
end 
// PSROut[ 15 ]
initial
begin
	PSROut[15] = 1'b1;
end 
// PSROut[ 14 ]
initial
begin
	PSROut[14] = 1'b1;
end 
// PSROut[ 13 ]
initial
begin
	PSROut[13] = 1'b1;
end 
// PSROut[ 12 ]
initial
begin
	PSROut[12] = 1'b0;
end 
// PSROut[ 11 ]
initial
begin
	PSROut[11] = 1'b0;
end 
// PSROut[ 10 ]
initial
begin
	PSROut[10] = 1'b0;
end 
// PSROut[ 9 ]
initial
begin
	PSROut[9] = 1'b0;
end 
// PSROut[ 8 ]
initial
begin
	PSROut[8] = 1'b0;
end 
// PSROut[ 7 ]
initial
begin
	PSROut[7] = 1'b0;
end 
// PSROut[ 6 ]
initial
begin
	PSROut[6] = 1'b0;
end 
// PSROut[ 5 ]
initial
begin
	PSROut[5] = 1'b0;
end 
// PSROut[ 4 ]
initial
begin
	PSROut[4] = 1'b0;
end 
// PSROut[ 3 ]
initial
begin
	PSROut[3] = 1'b0;
end 
// PSROut[ 2 ]
initial
begin
	PSROut[2] = 1'b1;
end 
// PSROut[ 1 ]
initial
begin
	PSROut[1] = 1'b1;
end 
// PSROut[ 0 ]
initial
begin
	PSROut[0] = 1'b1;
end 

Data_MdMux_vlg_sample_tst tb_sample (
	.ACOut(ACOut),
	.DirMd(DirMd),
	.GPROut(GPROut),
	.PSROut(PSROut),
	.SelectDataMd(SelectDataMd),
	.sampler_tx(sampler)
);

Data_MdMux_vlg_check_tst tb_out(
	.DatOut_Md(DatOut_Md),
	.sampler_rx(sampler)
);
endmodule

