// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2020 10:31:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	Habilitar,
	Numero_1,
	Numero_2,
	Operacion,
	Reloj,
	Restablecer,
	sampler_tx
);
input  Habilitar;
input [15:0] Numero_1;
input [15:0] Numero_2;
input [3:0] Operacion;
input  Reloj;
input  Restablecer;
output sampler_tx;

reg sample;
time current_time;
always @(Habilitar or Numero_1 or Numero_2 or Operacion or Reloj or Restablecer)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	Disponibilidad,
	Resultado_C,
	Resultado_N,
	Resultado_O,
	Resultado_Z,
	ResultadoTotal,
	sampler_rx
);
input  Disponibilidad;
input  Resultado_C;
input  Resultado_N;
input  Resultado_O;
input  Resultado_Z;
input [15:0] ResultadoTotal;
input sampler_rx;

reg  Disponibilidad_expected;
reg  Resultado_C_expected;
reg  Resultado_N_expected;
reg  Resultado_O_expected;
reg  Resultado_Z_expected;
reg [15:0] ResultadoTotal_expected;

reg  Disponibilidad_prev;
reg  Resultado_C_prev;
reg  Resultado_N_prev;
reg  Resultado_O_prev;
reg  Resultado_Z_prev;
reg [15:0] ResultadoTotal_prev;

reg  Disponibilidad_expected_prev;
reg  Resultado_C_expected_prev;
reg  Resultado_N_expected_prev;
reg  Resultado_O_expected_prev;
reg  Resultado_Z_expected_prev;
reg [15:0] ResultadoTotal_expected_prev;

reg  last_Disponibilidad_exp;
reg  last_Resultado_C_exp;
reg  last_Resultado_N_exp;
reg  last_Resultado_O_exp;
reg  last_Resultado_Z_exp;
reg [15:0] last_ResultadoTotal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Disponibilidad_prev = Disponibilidad;
	Resultado_C_prev = Resultado_C;
	Resultado_N_prev = Resultado_N;
	Resultado_O_prev = Resultado_O;
	Resultado_Z_prev = Resultado_Z;
	ResultadoTotal_prev = ResultadoTotal;
end

// update expected /o prevs

always @(trigger)
begin
	Disponibilidad_expected_prev = Disponibilidad_expected;
	Resultado_C_expected_prev = Resultado_C_expected;
	Resultado_N_expected_prev = Resultado_N_expected;
	Resultado_O_expected_prev = Resultado_O_expected;
	Resultado_Z_expected_prev = Resultado_Z_expected;
	ResultadoTotal_expected_prev = ResultadoTotal_expected;
end



// expected Disponibilidad
initial
begin
	Disponibilidad_expected = 1'bX;
end 

// expected Resultado_C
initial
begin
	Resultado_C_expected = 1'bX;
end 

// expected Resultado_N
initial
begin
	Resultado_N_expected = 1'bX;
end 

// expected Resultado_O
initial
begin
	Resultado_O_expected = 1'bX;
end 

// expected Resultado_Z
initial
begin
	Resultado_Z_expected = 1'bX;
end 
// expected ResultadoTotal[ 15 ]
initial
begin
	ResultadoTotal_expected[15] = 1'bX;
end 
// expected ResultadoTotal[ 14 ]
initial
begin
	ResultadoTotal_expected[14] = 1'bX;
end 
// expected ResultadoTotal[ 13 ]
initial
begin
	ResultadoTotal_expected[13] = 1'bX;
end 
// expected ResultadoTotal[ 12 ]
initial
begin
	ResultadoTotal_expected[12] = 1'bX;
end 
// expected ResultadoTotal[ 11 ]
initial
begin
	ResultadoTotal_expected[11] = 1'bX;
end 
// expected ResultadoTotal[ 10 ]
initial
begin
	ResultadoTotal_expected[10] = 1'bX;
end 
// expected ResultadoTotal[ 9 ]
initial
begin
	ResultadoTotal_expected[9] = 1'bX;
end 
// expected ResultadoTotal[ 8 ]
initial
begin
	ResultadoTotal_expected[8] = 1'bX;
end 
// expected ResultadoTotal[ 7 ]
initial
begin
	ResultadoTotal_expected[7] = 1'bX;
end 
// expected ResultadoTotal[ 6 ]
initial
begin
	ResultadoTotal_expected[6] = 1'bX;
end 
// expected ResultadoTotal[ 5 ]
initial
begin
	ResultadoTotal_expected[5] = 1'bX;
end 
// expected ResultadoTotal[ 4 ]
initial
begin
	ResultadoTotal_expected[4] = 1'bX;
end 
// expected ResultadoTotal[ 3 ]
initial
begin
	ResultadoTotal_expected[3] = 1'bX;
end 
// expected ResultadoTotal[ 2 ]
initial
begin
	ResultadoTotal_expected[2] = 1'bX;
end 
// expected ResultadoTotal[ 1 ]
initial
begin
	ResultadoTotal_expected[1] = 1'bX;
end 
// expected ResultadoTotal[ 0 ]
initial
begin
	ResultadoTotal_expected[0] = 1'bX;
end 
// generate trigger
always @(Disponibilidad_expected or Disponibilidad or Resultado_C_expected or Resultado_C or Resultado_N_expected or Resultado_N or Resultado_O_expected or Resultado_O or Resultado_Z_expected or Resultado_Z or ResultadoTotal_expected or ResultadoTotal)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Disponibilidad = %b | expected Resultado_C = %b | expected Resultado_N = %b | expected Resultado_O = %b | expected Resultado_Z = %b | expected ResultadoTotal = %b | ",Disponibilidad_expected_prev,Resultado_C_expected_prev,Resultado_N_expected_prev,Resultado_O_expected_prev,Resultado_Z_expected_prev,ResultadoTotal_expected_prev);
	$display("| real Disponibilidad = %b | real Resultado_C = %b | real Resultado_N = %b | real Resultado_O = %b | real Resultado_Z = %b | real ResultadoTotal = %b | ",Disponibilidad_prev,Resultado_C_prev,Resultado_N_prev,Resultado_O_prev,Resultado_Z_prev,ResultadoTotal_prev);
`endif
	if (
		( Disponibilidad_expected_prev !== 1'bx ) && ( Disponibilidad_prev !== Disponibilidad_expected_prev )
		&& ((Disponibilidad_expected_prev !== last_Disponibilidad_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disponibilidad :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disponibilidad_expected_prev);
		$display ("     Real value = %b", Disponibilidad_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Disponibilidad_exp = Disponibilidad_expected_prev;
	end
	if (
		( Resultado_C_expected_prev !== 1'bx ) && ( Resultado_C_prev !== Resultado_C_expected_prev )
		&& ((Resultado_C_expected_prev !== last_Resultado_C_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_C_expected_prev);
		$display ("     Real value = %b", Resultado_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Resultado_C_exp = Resultado_C_expected_prev;
	end
	if (
		( Resultado_N_expected_prev !== 1'bx ) && ( Resultado_N_prev !== Resultado_N_expected_prev )
		&& ((Resultado_N_expected_prev !== last_Resultado_N_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_N_expected_prev);
		$display ("     Real value = %b", Resultado_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Resultado_N_exp = Resultado_N_expected_prev;
	end
	if (
		( Resultado_O_expected_prev !== 1'bx ) && ( Resultado_O_prev !== Resultado_O_expected_prev )
		&& ((Resultado_O_expected_prev !== last_Resultado_O_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_O :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_O_expected_prev);
		$display ("     Real value = %b", Resultado_O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Resultado_O_exp = Resultado_O_expected_prev;
	end
	if (
		( Resultado_Z_expected_prev !== 1'bx ) && ( Resultado_Z_prev !== Resultado_Z_expected_prev )
		&& ((Resultado_Z_expected_prev !== last_Resultado_Z_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Resultado_Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Resultado_Z_expected_prev);
		$display ("     Real value = %b", Resultado_Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Resultado_Z_exp = Resultado_Z_expected_prev;
	end
	if (
		( ResultadoTotal_expected_prev[0] !== 1'bx ) && ( ResultadoTotal_prev[0] !== ResultadoTotal_expected_prev[0] )
		&& ((ResultadoTotal_expected_prev[0] !== last_ResultadoTotal_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[0] = ResultadoTotal_expected_prev[0];
	end
	if (
		( ResultadoTotal_expected_prev[1] !== 1'bx ) && ( ResultadoTotal_prev[1] !== ResultadoTotal_expected_prev[1] )
		&& ((ResultadoTotal_expected_prev[1] !== last_ResultadoTotal_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[1] = ResultadoTotal_expected_prev[1];
	end
	if (
		( ResultadoTotal_expected_prev[2] !== 1'bx ) && ( ResultadoTotal_prev[2] !== ResultadoTotal_expected_prev[2] )
		&& ((ResultadoTotal_expected_prev[2] !== last_ResultadoTotal_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[2] = ResultadoTotal_expected_prev[2];
	end
	if (
		( ResultadoTotal_expected_prev[3] !== 1'bx ) && ( ResultadoTotal_prev[3] !== ResultadoTotal_expected_prev[3] )
		&& ((ResultadoTotal_expected_prev[3] !== last_ResultadoTotal_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[3] = ResultadoTotal_expected_prev[3];
	end
	if (
		( ResultadoTotal_expected_prev[4] !== 1'bx ) && ( ResultadoTotal_prev[4] !== ResultadoTotal_expected_prev[4] )
		&& ((ResultadoTotal_expected_prev[4] !== last_ResultadoTotal_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[4] = ResultadoTotal_expected_prev[4];
	end
	if (
		( ResultadoTotal_expected_prev[5] !== 1'bx ) && ( ResultadoTotal_prev[5] !== ResultadoTotal_expected_prev[5] )
		&& ((ResultadoTotal_expected_prev[5] !== last_ResultadoTotal_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[5] = ResultadoTotal_expected_prev[5];
	end
	if (
		( ResultadoTotal_expected_prev[6] !== 1'bx ) && ( ResultadoTotal_prev[6] !== ResultadoTotal_expected_prev[6] )
		&& ((ResultadoTotal_expected_prev[6] !== last_ResultadoTotal_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[6] = ResultadoTotal_expected_prev[6];
	end
	if (
		( ResultadoTotal_expected_prev[7] !== 1'bx ) && ( ResultadoTotal_prev[7] !== ResultadoTotal_expected_prev[7] )
		&& ((ResultadoTotal_expected_prev[7] !== last_ResultadoTotal_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[7] = ResultadoTotal_expected_prev[7];
	end
	if (
		( ResultadoTotal_expected_prev[8] !== 1'bx ) && ( ResultadoTotal_prev[8] !== ResultadoTotal_expected_prev[8] )
		&& ((ResultadoTotal_expected_prev[8] !== last_ResultadoTotal_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[8] = ResultadoTotal_expected_prev[8];
	end
	if (
		( ResultadoTotal_expected_prev[9] !== 1'bx ) && ( ResultadoTotal_prev[9] !== ResultadoTotal_expected_prev[9] )
		&& ((ResultadoTotal_expected_prev[9] !== last_ResultadoTotal_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[9] = ResultadoTotal_expected_prev[9];
	end
	if (
		( ResultadoTotal_expected_prev[10] !== 1'bx ) && ( ResultadoTotal_prev[10] !== ResultadoTotal_expected_prev[10] )
		&& ((ResultadoTotal_expected_prev[10] !== last_ResultadoTotal_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[10] = ResultadoTotal_expected_prev[10];
	end
	if (
		( ResultadoTotal_expected_prev[11] !== 1'bx ) && ( ResultadoTotal_prev[11] !== ResultadoTotal_expected_prev[11] )
		&& ((ResultadoTotal_expected_prev[11] !== last_ResultadoTotal_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[11] = ResultadoTotal_expected_prev[11];
	end
	if (
		( ResultadoTotal_expected_prev[12] !== 1'bx ) && ( ResultadoTotal_prev[12] !== ResultadoTotal_expected_prev[12] )
		&& ((ResultadoTotal_expected_prev[12] !== last_ResultadoTotal_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[12] = ResultadoTotal_expected_prev[12];
	end
	if (
		( ResultadoTotal_expected_prev[13] !== 1'bx ) && ( ResultadoTotal_prev[13] !== ResultadoTotal_expected_prev[13] )
		&& ((ResultadoTotal_expected_prev[13] !== last_ResultadoTotal_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[13] = ResultadoTotal_expected_prev[13];
	end
	if (
		( ResultadoTotal_expected_prev[14] !== 1'bx ) && ( ResultadoTotal_prev[14] !== ResultadoTotal_expected_prev[14] )
		&& ((ResultadoTotal_expected_prev[14] !== last_ResultadoTotal_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[14] = ResultadoTotal_expected_prev[14];
	end
	if (
		( ResultadoTotal_expected_prev[15] !== 1'bx ) && ( ResultadoTotal_prev[15] !== ResultadoTotal_expected_prev[15] )
		&& ((ResultadoTotal_expected_prev[15] !== last_ResultadoTotal_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultadoTotal[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultadoTotal_expected_prev);
		$display ("     Real value = %b", ResultadoTotal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ResultadoTotal_exp[15] = ResultadoTotal_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Habilitar;
reg [15:0] Numero_1;
reg [15:0] Numero_2;
reg [3:0] Operacion;
reg Reloj;
reg Restablecer;
// wires                                               
wire Disponibilidad;
wire Resultado_C;
wire Resultado_N;
wire Resultado_O;
wire Resultado_Z;
wire [15:0] ResultadoTotal;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.Disponibilidad(Disponibilidad),
	.Habilitar(Habilitar),
	.Numero_1(Numero_1),
	.Numero_2(Numero_2),
	.Operacion(Operacion),
	.Reloj(Reloj),
	.Restablecer(Restablecer),
	.Resultado_C(Resultado_C),
	.Resultado_N(Resultado_N),
	.Resultado_O(Resultado_O),
	.Resultado_Z(Resultado_Z),
	.ResultadoTotal(ResultadoTotal)
);

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Restablecer
initial
begin
	Restablecer = 1'b1;
end 

// Habilitar
initial
begin
	Habilitar = 1'b1;
	Habilitar = #130000 1'b0;
	Habilitar = #20000 1'b1;
end 
// Numero_1[ 15 ]
initial
begin
	Numero_1[15] = 1'b1;
end 
// Numero_1[ 14 ]
initial
begin
	Numero_1[14] = 1'b1;
end 
// Numero_1[ 13 ]
initial
begin
	Numero_1[13] = 1'b1;
end 
// Numero_1[ 12 ]
initial
begin
	Numero_1[12] = 1'b1;
end 
// Numero_1[ 11 ]
initial
begin
	Numero_1[11] = 1'b1;
end 
// Numero_1[ 10 ]
initial
begin
	Numero_1[10] = 1'b1;
end 
// Numero_1[ 9 ]
initial
begin
	Numero_1[9] = 1'b1;
end 
// Numero_1[ 8 ]
initial
begin
	Numero_1[8] = 1'b1;
end 
// Numero_1[ 7 ]
initial
begin
	Numero_1[7] = 1'b1;
end 
// Numero_1[ 6 ]
initial
begin
	Numero_1[6] = 1'b1;
end 
// Numero_1[ 5 ]
initial
begin
	Numero_1[5] = 1'b1;
end 
// Numero_1[ 4 ]
initial
begin
	Numero_1[4] = 1'b1;
end 
// Numero_1[ 3 ]
initial
begin
	Numero_1[3] = 1'b1;
end 
// Numero_1[ 2 ]
initial
begin
	Numero_1[2] = 1'b1;
end 
// Numero_1[ 1 ]
initial
begin
	Numero_1[1] = 1'b1;
end 
// Numero_1[ 0 ]
initial
begin
	Numero_1[0] = 1'b1;
end 
// Numero_2[ 15 ]
initial
begin
	Numero_2[15] = 1'b0;
end 
// Numero_2[ 14 ]
initial
begin
	Numero_2[14] = 1'b0;
end 
// Numero_2[ 13 ]
initial
begin
	Numero_2[13] = 1'b0;
end 
// Numero_2[ 12 ]
initial
begin
	Numero_2[12] = 1'b0;
end 
// Numero_2[ 11 ]
initial
begin
	Numero_2[11] = 1'b0;
end 
// Numero_2[ 10 ]
initial
begin
	Numero_2[10] = 1'b0;
end 
// Numero_2[ 9 ]
initial
begin
	Numero_2[9] = 1'b0;
end 
// Numero_2[ 8 ]
initial
begin
	Numero_2[8] = 1'b0;
end 
// Numero_2[ 7 ]
initial
begin
	Numero_2[7] = 1'b0;
end 
// Numero_2[ 6 ]
initial
begin
	Numero_2[6] = 1'b0;
end 
// Numero_2[ 5 ]
initial
begin
	Numero_2[5] = 1'b0;
end 
// Numero_2[ 4 ]
initial
begin
	Numero_2[4] = 1'b0;
end 
// Numero_2[ 3 ]
initial
begin
	Numero_2[3] = 1'b0;
end 
// Numero_2[ 2 ]
initial
begin
	Numero_2[2] = 1'b0;
end 
// Numero_2[ 1 ]
initial
begin
	Numero_2[1] = 1'b0;
end 
// Numero_2[ 0 ]
initial
begin
	Numero_2[0] = 1'b0;
end 
// Operacion[ 3 ]
initial
begin
	Operacion[3] = 1'b0;
end 
// Operacion[ 2 ]
initial
begin
	Operacion[2] = 1'b1;
end 
// Operacion[ 1 ]
initial
begin
	Operacion[1] = 1'b1;
end 
// Operacion[ 0 ]
initial
begin
	Operacion[0] = 1'b1;
end 

ALU_vlg_sample_tst tb_sample (
	.Habilitar(Habilitar),
	.Numero_1(Numero_1),
	.Numero_2(Numero_2),
	.Operacion(Operacion),
	.Reloj(Reloj),
	.Restablecer(Restablecer),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.Disponibilidad(Disponibilidad),
	.Resultado_C(Resultado_C),
	.Resultado_N(Resultado_N),
	.Resultado_O(Resultado_O),
	.Resultado_Z(Resultado_Z),
	.ResultadoTotal(ResultadoTotal),
	.sampler_rx(sampler)
);
endmodule

