// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2020 06:46:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Procesador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Procesador_vlg_sample_tst(
	Clock,
	Dato_Mp,
	Datoin_Md,
	Int,
	ResetSystem,
	sampler_tx
);
input  Clock;
input [22:0] Dato_Mp;
input [15:0] Datoin_Md;
input  Int;
input  ResetSystem;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Dato_Mp or Datoin_Md or Int or ResetSystem)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Procesador_vlg_check_tst (
	Count,
	Dataout_Md,
	Dir_Mp,
	Ena_Md,
	Ena_Mp,
	Estados,
	MDM,
	Read_Mp,
	RW_Md,
	sampler_rx
);
input [15:0] Count;
input [15:0] Dataout_Md;
input [15:0] Dir_Mp;
input  Ena_Md;
input  Ena_Mp;
input [5:0] Estados;
input [15:0] MDM;
input  Read_Mp;
input  RW_Md;
input sampler_rx;

reg [15:0] Count_expected;
reg [15:0] Dataout_Md_expected;
reg [15:0] Dir_Mp_expected;
reg  Ena_Md_expected;
reg  Ena_Mp_expected;
reg [5:0] Estados_expected;
reg [15:0] MDM_expected;
reg  Read_Mp_expected;
reg  RW_Md_expected;

reg [15:0] Count_prev;
reg [15:0] Dataout_Md_prev;
reg [15:0] Dir_Mp_prev;
reg  Ena_Md_prev;
reg  Ena_Mp_prev;
reg [5:0] Estados_prev;
reg [15:0] MDM_prev;
reg  Read_Mp_prev;
reg  RW_Md_prev;

reg [15:0] Count_expected_prev;
reg [15:0] Dataout_Md_expected_prev;
reg [15:0] Dir_Mp_expected_prev;
reg  Ena_Md_expected_prev;
reg  Ena_Mp_expected_prev;
reg [5:0] Estados_expected_prev;
reg [15:0] MDM_expected_prev;
reg  Read_Mp_expected_prev;
reg  RW_Md_expected_prev;

reg [15:0] last_Count_exp;
reg [15:0] last_Dataout_Md_exp;
reg [15:0] last_Dir_Mp_exp;
reg  last_Ena_Md_exp;
reg  last_Ena_Mp_exp;
reg [5:0] last_Estados_exp;
reg [15:0] last_MDM_exp;
reg  last_Read_Mp_exp;
reg  last_RW_Md_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Count_prev = Count;
	Dataout_Md_prev = Dataout_Md;
	Dir_Mp_prev = Dir_Mp;
	Ena_Md_prev = Ena_Md;
	Ena_Mp_prev = Ena_Mp;
	Estados_prev = Estados;
	MDM_prev = MDM;
	Read_Mp_prev = Read_Mp;
	RW_Md_prev = RW_Md;
end

// update expected /o prevs

always @(trigger)
begin
	Count_expected_prev = Count_expected;
	Dataout_Md_expected_prev = Dataout_Md_expected;
	Dir_Mp_expected_prev = Dir_Mp_expected;
	Ena_Md_expected_prev = Ena_Md_expected;
	Ena_Mp_expected_prev = Ena_Mp_expected;
	Estados_expected_prev = Estados_expected;
	MDM_expected_prev = MDM_expected;
	Read_Mp_expected_prev = Read_Mp_expected;
	RW_Md_expected_prev = RW_Md_expected;
end


// expected Count[ 15 ]
initial
begin
	Count_expected[15] = 1'bX;
end 
// expected Count[ 14 ]
initial
begin
	Count_expected[14] = 1'bX;
end 
// expected Count[ 13 ]
initial
begin
	Count_expected[13] = 1'bX;
end 
// expected Count[ 12 ]
initial
begin
	Count_expected[12] = 1'bX;
end 
// expected Count[ 11 ]
initial
begin
	Count_expected[11] = 1'bX;
end 
// expected Count[ 10 ]
initial
begin
	Count_expected[10] = 1'bX;
end 
// expected Count[ 9 ]
initial
begin
	Count_expected[9] = 1'bX;
end 
// expected Count[ 8 ]
initial
begin
	Count_expected[8] = 1'bX;
end 
// expected Count[ 7 ]
initial
begin
	Count_expected[7] = 1'bX;
end 
// expected Count[ 6 ]
initial
begin
	Count_expected[6] = 1'bX;
end 
// expected Count[ 5 ]
initial
begin
	Count_expected[5] = 1'bX;
end 
// expected Count[ 4 ]
initial
begin
	Count_expected[4] = 1'bX;
end 
// expected Count[ 3 ]
initial
begin
	Count_expected[3] = 1'bX;
end 
// expected Count[ 2 ]
initial
begin
	Count_expected[2] = 1'bX;
end 
// expected Count[ 1 ]
initial
begin
	Count_expected[1] = 1'bX;
end 
// expected Count[ 0 ]
initial
begin
	Count_expected[0] = 1'bX;
end 
// expected Dataout_Md[ 15 ]
initial
begin
	Dataout_Md_expected[15] = 1'bX;
end 
// expected Dataout_Md[ 14 ]
initial
begin
	Dataout_Md_expected[14] = 1'bX;
end 
// expected Dataout_Md[ 13 ]
initial
begin
	Dataout_Md_expected[13] = 1'bX;
end 
// expected Dataout_Md[ 12 ]
initial
begin
	Dataout_Md_expected[12] = 1'bX;
end 
// expected Dataout_Md[ 11 ]
initial
begin
	Dataout_Md_expected[11] = 1'bX;
end 
// expected Dataout_Md[ 10 ]
initial
begin
	Dataout_Md_expected[10] = 1'bX;
end 
// expected Dataout_Md[ 9 ]
initial
begin
	Dataout_Md_expected[9] = 1'bX;
end 
// expected Dataout_Md[ 8 ]
initial
begin
	Dataout_Md_expected[8] = 1'bX;
end 
// expected Dataout_Md[ 7 ]
initial
begin
	Dataout_Md_expected[7] = 1'bX;
end 
// expected Dataout_Md[ 6 ]
initial
begin
	Dataout_Md_expected[6] = 1'bX;
end 
// expected Dataout_Md[ 5 ]
initial
begin
	Dataout_Md_expected[5] = 1'bX;
end 
// expected Dataout_Md[ 4 ]
initial
begin
	Dataout_Md_expected[4] = 1'bX;
end 
// expected Dataout_Md[ 3 ]
initial
begin
	Dataout_Md_expected[3] = 1'bX;
end 
// expected Dataout_Md[ 2 ]
initial
begin
	Dataout_Md_expected[2] = 1'bX;
end 
// expected Dataout_Md[ 1 ]
initial
begin
	Dataout_Md_expected[1] = 1'bX;
end 
// expected Dataout_Md[ 0 ]
initial
begin
	Dataout_Md_expected[0] = 1'bX;
end 
// expected Dir_Mp[ 15 ]
initial
begin
	Dir_Mp_expected[15] = 1'bX;
end 
// expected Dir_Mp[ 14 ]
initial
begin
	Dir_Mp_expected[14] = 1'bX;
end 
// expected Dir_Mp[ 13 ]
initial
begin
	Dir_Mp_expected[13] = 1'bX;
end 
// expected Dir_Mp[ 12 ]
initial
begin
	Dir_Mp_expected[12] = 1'bX;
end 
// expected Dir_Mp[ 11 ]
initial
begin
	Dir_Mp_expected[11] = 1'bX;
end 
// expected Dir_Mp[ 10 ]
initial
begin
	Dir_Mp_expected[10] = 1'bX;
end 
// expected Dir_Mp[ 9 ]
initial
begin
	Dir_Mp_expected[9] = 1'bX;
end 
// expected Dir_Mp[ 8 ]
initial
begin
	Dir_Mp_expected[8] = 1'bX;
end 
// expected Dir_Mp[ 7 ]
initial
begin
	Dir_Mp_expected[7] = 1'bX;
end 
// expected Dir_Mp[ 6 ]
initial
begin
	Dir_Mp_expected[6] = 1'bX;
end 
// expected Dir_Mp[ 5 ]
initial
begin
	Dir_Mp_expected[5] = 1'bX;
end 
// expected Dir_Mp[ 4 ]
initial
begin
	Dir_Mp_expected[4] = 1'bX;
end 
// expected Dir_Mp[ 3 ]
initial
begin
	Dir_Mp_expected[3] = 1'bX;
end 
// expected Dir_Mp[ 2 ]
initial
begin
	Dir_Mp_expected[2] = 1'bX;
end 
// expected Dir_Mp[ 1 ]
initial
begin
	Dir_Mp_expected[1] = 1'bX;
end 
// expected Dir_Mp[ 0 ]
initial
begin
	Dir_Mp_expected[0] = 1'bX;
end 

// expected Ena_Md
initial
begin
	Ena_Md_expected = 1'bX;
end 

// expected Ena_Mp
initial
begin
	Ena_Mp_expected = 1'bX;
end 
// expected Estados[ 5 ]
initial
begin
	Estados_expected[5] = 1'bX;
end 
// expected Estados[ 4 ]
initial
begin
	Estados_expected[4] = 1'bX;
end 
// expected Estados[ 3 ]
initial
begin
	Estados_expected[3] = 1'bX;
end 
// expected Estados[ 2 ]
initial
begin
	Estados_expected[2] = 1'bX;
end 
// expected Estados[ 1 ]
initial
begin
	Estados_expected[1] = 1'bX;
end 
// expected Estados[ 0 ]
initial
begin
	Estados_expected[0] = 1'bX;
end 
// expected MDM[ 15 ]
initial
begin
	MDM_expected[15] = 1'bX;
end 
// expected MDM[ 14 ]
initial
begin
	MDM_expected[14] = 1'bX;
end 
// expected MDM[ 13 ]
initial
begin
	MDM_expected[13] = 1'bX;
end 
// expected MDM[ 12 ]
initial
begin
	MDM_expected[12] = 1'bX;
end 
// expected MDM[ 11 ]
initial
begin
	MDM_expected[11] = 1'bX;
end 
// expected MDM[ 10 ]
initial
begin
	MDM_expected[10] = 1'bX;
end 
// expected MDM[ 9 ]
initial
begin
	MDM_expected[9] = 1'bX;
end 
// expected MDM[ 8 ]
initial
begin
	MDM_expected[8] = 1'bX;
end 
// expected MDM[ 7 ]
initial
begin
	MDM_expected[7] = 1'bX;
end 
// expected MDM[ 6 ]
initial
begin
	MDM_expected[6] = 1'bX;
end 
// expected MDM[ 5 ]
initial
begin
	MDM_expected[5] = 1'bX;
end 
// expected MDM[ 4 ]
initial
begin
	MDM_expected[4] = 1'bX;
end 
// expected MDM[ 3 ]
initial
begin
	MDM_expected[3] = 1'bX;
end 
// expected MDM[ 2 ]
initial
begin
	MDM_expected[2] = 1'bX;
end 
// expected MDM[ 1 ]
initial
begin
	MDM_expected[1] = 1'bX;
end 
// expected MDM[ 0 ]
initial
begin
	MDM_expected[0] = 1'bX;
end 

// expected Read_Mp
initial
begin
	Read_Mp_expected = 1'bX;
end 

// expected RW_Md
initial
begin
	RW_Md_expected = 1'bX;
end 
// generate trigger
always @(Count_expected or Count or Dataout_Md_expected or Dataout_Md or Dir_Mp_expected or Dir_Mp or Ena_Md_expected or Ena_Md or Ena_Mp_expected or Ena_Mp or Estados_expected or Estados or MDM_expected or MDM or Read_Mp_expected or Read_Mp or RW_Md_expected or RW_Md)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Count = %b | expected Dataout_Md = %b | expected Dir_Mp = %b | expected Ena_Md = %b | expected Ena_Mp = %b | expected Estados = %b | expected MDM = %b | expected Read_Mp = %b | expected RW_Md = %b | ",Count_expected_prev,Dataout_Md_expected_prev,Dir_Mp_expected_prev,Ena_Md_expected_prev,Ena_Mp_expected_prev,Estados_expected_prev,MDM_expected_prev,Read_Mp_expected_prev,RW_Md_expected_prev);
	$display("| real Count = %b | real Dataout_Md = %b | real Dir_Mp = %b | real Ena_Md = %b | real Ena_Mp = %b | real Estados = %b | real MDM = %b | real Read_Mp = %b | real RW_Md = %b | ",Count_prev,Dataout_Md_prev,Dir_Mp_prev,Ena_Md_prev,Ena_Mp_prev,Estados_prev,MDM_prev,Read_Mp_prev,RW_Md_prev);
`endif
	if (
		( Count_expected_prev[0] !== 1'bx ) && ( Count_prev[0] !== Count_expected_prev[0] )
		&& ((Count_expected_prev[0] !== last_Count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[0] = Count_expected_prev[0];
	end
	if (
		( Count_expected_prev[1] !== 1'bx ) && ( Count_prev[1] !== Count_expected_prev[1] )
		&& ((Count_expected_prev[1] !== last_Count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[1] = Count_expected_prev[1];
	end
	if (
		( Count_expected_prev[2] !== 1'bx ) && ( Count_prev[2] !== Count_expected_prev[2] )
		&& ((Count_expected_prev[2] !== last_Count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[2] = Count_expected_prev[2];
	end
	if (
		( Count_expected_prev[3] !== 1'bx ) && ( Count_prev[3] !== Count_expected_prev[3] )
		&& ((Count_expected_prev[3] !== last_Count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[3] = Count_expected_prev[3];
	end
	if (
		( Count_expected_prev[4] !== 1'bx ) && ( Count_prev[4] !== Count_expected_prev[4] )
		&& ((Count_expected_prev[4] !== last_Count_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[4] = Count_expected_prev[4];
	end
	if (
		( Count_expected_prev[5] !== 1'bx ) && ( Count_prev[5] !== Count_expected_prev[5] )
		&& ((Count_expected_prev[5] !== last_Count_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[5] = Count_expected_prev[5];
	end
	if (
		( Count_expected_prev[6] !== 1'bx ) && ( Count_prev[6] !== Count_expected_prev[6] )
		&& ((Count_expected_prev[6] !== last_Count_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[6] = Count_expected_prev[6];
	end
	if (
		( Count_expected_prev[7] !== 1'bx ) && ( Count_prev[7] !== Count_expected_prev[7] )
		&& ((Count_expected_prev[7] !== last_Count_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[7] = Count_expected_prev[7];
	end
	if (
		( Count_expected_prev[8] !== 1'bx ) && ( Count_prev[8] !== Count_expected_prev[8] )
		&& ((Count_expected_prev[8] !== last_Count_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[8] = Count_expected_prev[8];
	end
	if (
		( Count_expected_prev[9] !== 1'bx ) && ( Count_prev[9] !== Count_expected_prev[9] )
		&& ((Count_expected_prev[9] !== last_Count_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[9] = Count_expected_prev[9];
	end
	if (
		( Count_expected_prev[10] !== 1'bx ) && ( Count_prev[10] !== Count_expected_prev[10] )
		&& ((Count_expected_prev[10] !== last_Count_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[10] = Count_expected_prev[10];
	end
	if (
		( Count_expected_prev[11] !== 1'bx ) && ( Count_prev[11] !== Count_expected_prev[11] )
		&& ((Count_expected_prev[11] !== last_Count_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[11] = Count_expected_prev[11];
	end
	if (
		( Count_expected_prev[12] !== 1'bx ) && ( Count_prev[12] !== Count_expected_prev[12] )
		&& ((Count_expected_prev[12] !== last_Count_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[12] = Count_expected_prev[12];
	end
	if (
		( Count_expected_prev[13] !== 1'bx ) && ( Count_prev[13] !== Count_expected_prev[13] )
		&& ((Count_expected_prev[13] !== last_Count_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[13] = Count_expected_prev[13];
	end
	if (
		( Count_expected_prev[14] !== 1'bx ) && ( Count_prev[14] !== Count_expected_prev[14] )
		&& ((Count_expected_prev[14] !== last_Count_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[14] = Count_expected_prev[14];
	end
	if (
		( Count_expected_prev[15] !== 1'bx ) && ( Count_prev[15] !== Count_expected_prev[15] )
		&& ((Count_expected_prev[15] !== last_Count_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Count[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Count_expected_prev);
		$display ("     Real value = %b", Count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Count_exp[15] = Count_expected_prev[15];
	end
	if (
		( Dataout_Md_expected_prev[0] !== 1'bx ) && ( Dataout_Md_prev[0] !== Dataout_Md_expected_prev[0] )
		&& ((Dataout_Md_expected_prev[0] !== last_Dataout_Md_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[0] = Dataout_Md_expected_prev[0];
	end
	if (
		( Dataout_Md_expected_prev[1] !== 1'bx ) && ( Dataout_Md_prev[1] !== Dataout_Md_expected_prev[1] )
		&& ((Dataout_Md_expected_prev[1] !== last_Dataout_Md_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[1] = Dataout_Md_expected_prev[1];
	end
	if (
		( Dataout_Md_expected_prev[2] !== 1'bx ) && ( Dataout_Md_prev[2] !== Dataout_Md_expected_prev[2] )
		&& ((Dataout_Md_expected_prev[2] !== last_Dataout_Md_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[2] = Dataout_Md_expected_prev[2];
	end
	if (
		( Dataout_Md_expected_prev[3] !== 1'bx ) && ( Dataout_Md_prev[3] !== Dataout_Md_expected_prev[3] )
		&& ((Dataout_Md_expected_prev[3] !== last_Dataout_Md_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[3] = Dataout_Md_expected_prev[3];
	end
	if (
		( Dataout_Md_expected_prev[4] !== 1'bx ) && ( Dataout_Md_prev[4] !== Dataout_Md_expected_prev[4] )
		&& ((Dataout_Md_expected_prev[4] !== last_Dataout_Md_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[4] = Dataout_Md_expected_prev[4];
	end
	if (
		( Dataout_Md_expected_prev[5] !== 1'bx ) && ( Dataout_Md_prev[5] !== Dataout_Md_expected_prev[5] )
		&& ((Dataout_Md_expected_prev[5] !== last_Dataout_Md_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[5] = Dataout_Md_expected_prev[5];
	end
	if (
		( Dataout_Md_expected_prev[6] !== 1'bx ) && ( Dataout_Md_prev[6] !== Dataout_Md_expected_prev[6] )
		&& ((Dataout_Md_expected_prev[6] !== last_Dataout_Md_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[6] = Dataout_Md_expected_prev[6];
	end
	if (
		( Dataout_Md_expected_prev[7] !== 1'bx ) && ( Dataout_Md_prev[7] !== Dataout_Md_expected_prev[7] )
		&& ((Dataout_Md_expected_prev[7] !== last_Dataout_Md_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[7] = Dataout_Md_expected_prev[7];
	end
	if (
		( Dataout_Md_expected_prev[8] !== 1'bx ) && ( Dataout_Md_prev[8] !== Dataout_Md_expected_prev[8] )
		&& ((Dataout_Md_expected_prev[8] !== last_Dataout_Md_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[8] = Dataout_Md_expected_prev[8];
	end
	if (
		( Dataout_Md_expected_prev[9] !== 1'bx ) && ( Dataout_Md_prev[9] !== Dataout_Md_expected_prev[9] )
		&& ((Dataout_Md_expected_prev[9] !== last_Dataout_Md_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[9] = Dataout_Md_expected_prev[9];
	end
	if (
		( Dataout_Md_expected_prev[10] !== 1'bx ) && ( Dataout_Md_prev[10] !== Dataout_Md_expected_prev[10] )
		&& ((Dataout_Md_expected_prev[10] !== last_Dataout_Md_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[10] = Dataout_Md_expected_prev[10];
	end
	if (
		( Dataout_Md_expected_prev[11] !== 1'bx ) && ( Dataout_Md_prev[11] !== Dataout_Md_expected_prev[11] )
		&& ((Dataout_Md_expected_prev[11] !== last_Dataout_Md_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[11] = Dataout_Md_expected_prev[11];
	end
	if (
		( Dataout_Md_expected_prev[12] !== 1'bx ) && ( Dataout_Md_prev[12] !== Dataout_Md_expected_prev[12] )
		&& ((Dataout_Md_expected_prev[12] !== last_Dataout_Md_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[12] = Dataout_Md_expected_prev[12];
	end
	if (
		( Dataout_Md_expected_prev[13] !== 1'bx ) && ( Dataout_Md_prev[13] !== Dataout_Md_expected_prev[13] )
		&& ((Dataout_Md_expected_prev[13] !== last_Dataout_Md_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[13] = Dataout_Md_expected_prev[13];
	end
	if (
		( Dataout_Md_expected_prev[14] !== 1'bx ) && ( Dataout_Md_prev[14] !== Dataout_Md_expected_prev[14] )
		&& ((Dataout_Md_expected_prev[14] !== last_Dataout_Md_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[14] = Dataout_Md_expected_prev[14];
	end
	if (
		( Dataout_Md_expected_prev[15] !== 1'bx ) && ( Dataout_Md_prev[15] !== Dataout_Md_expected_prev[15] )
		&& ((Dataout_Md_expected_prev[15] !== last_Dataout_Md_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dataout_Md[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dataout_Md_expected_prev);
		$display ("     Real value = %b", Dataout_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dataout_Md_exp[15] = Dataout_Md_expected_prev[15];
	end
	if (
		( Dir_Mp_expected_prev[0] !== 1'bx ) && ( Dir_Mp_prev[0] !== Dir_Mp_expected_prev[0] )
		&& ((Dir_Mp_expected_prev[0] !== last_Dir_Mp_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[0] = Dir_Mp_expected_prev[0];
	end
	if (
		( Dir_Mp_expected_prev[1] !== 1'bx ) && ( Dir_Mp_prev[1] !== Dir_Mp_expected_prev[1] )
		&& ((Dir_Mp_expected_prev[1] !== last_Dir_Mp_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[1] = Dir_Mp_expected_prev[1];
	end
	if (
		( Dir_Mp_expected_prev[2] !== 1'bx ) && ( Dir_Mp_prev[2] !== Dir_Mp_expected_prev[2] )
		&& ((Dir_Mp_expected_prev[2] !== last_Dir_Mp_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[2] = Dir_Mp_expected_prev[2];
	end
	if (
		( Dir_Mp_expected_prev[3] !== 1'bx ) && ( Dir_Mp_prev[3] !== Dir_Mp_expected_prev[3] )
		&& ((Dir_Mp_expected_prev[3] !== last_Dir_Mp_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[3] = Dir_Mp_expected_prev[3];
	end
	if (
		( Dir_Mp_expected_prev[4] !== 1'bx ) && ( Dir_Mp_prev[4] !== Dir_Mp_expected_prev[4] )
		&& ((Dir_Mp_expected_prev[4] !== last_Dir_Mp_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[4] = Dir_Mp_expected_prev[4];
	end
	if (
		( Dir_Mp_expected_prev[5] !== 1'bx ) && ( Dir_Mp_prev[5] !== Dir_Mp_expected_prev[5] )
		&& ((Dir_Mp_expected_prev[5] !== last_Dir_Mp_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[5] = Dir_Mp_expected_prev[5];
	end
	if (
		( Dir_Mp_expected_prev[6] !== 1'bx ) && ( Dir_Mp_prev[6] !== Dir_Mp_expected_prev[6] )
		&& ((Dir_Mp_expected_prev[6] !== last_Dir_Mp_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[6] = Dir_Mp_expected_prev[6];
	end
	if (
		( Dir_Mp_expected_prev[7] !== 1'bx ) && ( Dir_Mp_prev[7] !== Dir_Mp_expected_prev[7] )
		&& ((Dir_Mp_expected_prev[7] !== last_Dir_Mp_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[7] = Dir_Mp_expected_prev[7];
	end
	if (
		( Dir_Mp_expected_prev[8] !== 1'bx ) && ( Dir_Mp_prev[8] !== Dir_Mp_expected_prev[8] )
		&& ((Dir_Mp_expected_prev[8] !== last_Dir_Mp_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[8] = Dir_Mp_expected_prev[8];
	end
	if (
		( Dir_Mp_expected_prev[9] !== 1'bx ) && ( Dir_Mp_prev[9] !== Dir_Mp_expected_prev[9] )
		&& ((Dir_Mp_expected_prev[9] !== last_Dir_Mp_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[9] = Dir_Mp_expected_prev[9];
	end
	if (
		( Dir_Mp_expected_prev[10] !== 1'bx ) && ( Dir_Mp_prev[10] !== Dir_Mp_expected_prev[10] )
		&& ((Dir_Mp_expected_prev[10] !== last_Dir_Mp_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[10] = Dir_Mp_expected_prev[10];
	end
	if (
		( Dir_Mp_expected_prev[11] !== 1'bx ) && ( Dir_Mp_prev[11] !== Dir_Mp_expected_prev[11] )
		&& ((Dir_Mp_expected_prev[11] !== last_Dir_Mp_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[11] = Dir_Mp_expected_prev[11];
	end
	if (
		( Dir_Mp_expected_prev[12] !== 1'bx ) && ( Dir_Mp_prev[12] !== Dir_Mp_expected_prev[12] )
		&& ((Dir_Mp_expected_prev[12] !== last_Dir_Mp_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[12] = Dir_Mp_expected_prev[12];
	end
	if (
		( Dir_Mp_expected_prev[13] !== 1'bx ) && ( Dir_Mp_prev[13] !== Dir_Mp_expected_prev[13] )
		&& ((Dir_Mp_expected_prev[13] !== last_Dir_Mp_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[13] = Dir_Mp_expected_prev[13];
	end
	if (
		( Dir_Mp_expected_prev[14] !== 1'bx ) && ( Dir_Mp_prev[14] !== Dir_Mp_expected_prev[14] )
		&& ((Dir_Mp_expected_prev[14] !== last_Dir_Mp_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[14] = Dir_Mp_expected_prev[14];
	end
	if (
		( Dir_Mp_expected_prev[15] !== 1'bx ) && ( Dir_Mp_prev[15] !== Dir_Mp_expected_prev[15] )
		&& ((Dir_Mp_expected_prev[15] !== last_Dir_Mp_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dir_Mp[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dir_Mp_expected_prev);
		$display ("     Real value = %b", Dir_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Dir_Mp_exp[15] = Dir_Mp_expected_prev[15];
	end
	if (
		( Ena_Md_expected_prev !== 1'bx ) && ( Ena_Md_prev !== Ena_Md_expected_prev )
		&& ((Ena_Md_expected_prev !== last_Ena_Md_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ena_Md :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ena_Md_expected_prev);
		$display ("     Real value = %b", Ena_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Ena_Md_exp = Ena_Md_expected_prev;
	end
	if (
		( Ena_Mp_expected_prev !== 1'bx ) && ( Ena_Mp_prev !== Ena_Mp_expected_prev )
		&& ((Ena_Mp_expected_prev !== last_Ena_Mp_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ena_Mp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ena_Mp_expected_prev);
		$display ("     Real value = %b", Ena_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Ena_Mp_exp = Ena_Mp_expected_prev;
	end
	if (
		( Estados_expected_prev[0] !== 1'bx ) && ( Estados_prev[0] !== Estados_expected_prev[0] )
		&& ((Estados_expected_prev[0] !== last_Estados_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Estados_exp[0] = Estados_expected_prev[0];
	end
	if (
		( Estados_expected_prev[1] !== 1'bx ) && ( Estados_prev[1] !== Estados_expected_prev[1] )
		&& ((Estados_expected_prev[1] !== last_Estados_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Estados_exp[1] = Estados_expected_prev[1];
	end
	if (
		( Estados_expected_prev[2] !== 1'bx ) && ( Estados_prev[2] !== Estados_expected_prev[2] )
		&& ((Estados_expected_prev[2] !== last_Estados_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Estados_exp[2] = Estados_expected_prev[2];
	end
	if (
		( Estados_expected_prev[3] !== 1'bx ) && ( Estados_prev[3] !== Estados_expected_prev[3] )
		&& ((Estados_expected_prev[3] !== last_Estados_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Estados_exp[3] = Estados_expected_prev[3];
	end
	if (
		( Estados_expected_prev[4] !== 1'bx ) && ( Estados_prev[4] !== Estados_expected_prev[4] )
		&& ((Estados_expected_prev[4] !== last_Estados_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Estados_exp[4] = Estados_expected_prev[4];
	end
	if (
		( Estados_expected_prev[5] !== 1'bx ) && ( Estados_prev[5] !== Estados_expected_prev[5] )
		&& ((Estados_expected_prev[5] !== last_Estados_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Estados[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Estados_expected_prev);
		$display ("     Real value = %b", Estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Estados_exp[5] = Estados_expected_prev[5];
	end
	if (
		( MDM_expected_prev[0] !== 1'bx ) && ( MDM_prev[0] !== MDM_expected_prev[0] )
		&& ((MDM_expected_prev[0] !== last_MDM_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[0] = MDM_expected_prev[0];
	end
	if (
		( MDM_expected_prev[1] !== 1'bx ) && ( MDM_prev[1] !== MDM_expected_prev[1] )
		&& ((MDM_expected_prev[1] !== last_MDM_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[1] = MDM_expected_prev[1];
	end
	if (
		( MDM_expected_prev[2] !== 1'bx ) && ( MDM_prev[2] !== MDM_expected_prev[2] )
		&& ((MDM_expected_prev[2] !== last_MDM_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[2] = MDM_expected_prev[2];
	end
	if (
		( MDM_expected_prev[3] !== 1'bx ) && ( MDM_prev[3] !== MDM_expected_prev[3] )
		&& ((MDM_expected_prev[3] !== last_MDM_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[3] = MDM_expected_prev[3];
	end
	if (
		( MDM_expected_prev[4] !== 1'bx ) && ( MDM_prev[4] !== MDM_expected_prev[4] )
		&& ((MDM_expected_prev[4] !== last_MDM_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[4] = MDM_expected_prev[4];
	end
	if (
		( MDM_expected_prev[5] !== 1'bx ) && ( MDM_prev[5] !== MDM_expected_prev[5] )
		&& ((MDM_expected_prev[5] !== last_MDM_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[5] = MDM_expected_prev[5];
	end
	if (
		( MDM_expected_prev[6] !== 1'bx ) && ( MDM_prev[6] !== MDM_expected_prev[6] )
		&& ((MDM_expected_prev[6] !== last_MDM_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[6] = MDM_expected_prev[6];
	end
	if (
		( MDM_expected_prev[7] !== 1'bx ) && ( MDM_prev[7] !== MDM_expected_prev[7] )
		&& ((MDM_expected_prev[7] !== last_MDM_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[7] = MDM_expected_prev[7];
	end
	if (
		( MDM_expected_prev[8] !== 1'bx ) && ( MDM_prev[8] !== MDM_expected_prev[8] )
		&& ((MDM_expected_prev[8] !== last_MDM_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[8] = MDM_expected_prev[8];
	end
	if (
		( MDM_expected_prev[9] !== 1'bx ) && ( MDM_prev[9] !== MDM_expected_prev[9] )
		&& ((MDM_expected_prev[9] !== last_MDM_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[9] = MDM_expected_prev[9];
	end
	if (
		( MDM_expected_prev[10] !== 1'bx ) && ( MDM_prev[10] !== MDM_expected_prev[10] )
		&& ((MDM_expected_prev[10] !== last_MDM_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[10] = MDM_expected_prev[10];
	end
	if (
		( MDM_expected_prev[11] !== 1'bx ) && ( MDM_prev[11] !== MDM_expected_prev[11] )
		&& ((MDM_expected_prev[11] !== last_MDM_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[11] = MDM_expected_prev[11];
	end
	if (
		( MDM_expected_prev[12] !== 1'bx ) && ( MDM_prev[12] !== MDM_expected_prev[12] )
		&& ((MDM_expected_prev[12] !== last_MDM_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[12] = MDM_expected_prev[12];
	end
	if (
		( MDM_expected_prev[13] !== 1'bx ) && ( MDM_prev[13] !== MDM_expected_prev[13] )
		&& ((MDM_expected_prev[13] !== last_MDM_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[13] = MDM_expected_prev[13];
	end
	if (
		( MDM_expected_prev[14] !== 1'bx ) && ( MDM_prev[14] !== MDM_expected_prev[14] )
		&& ((MDM_expected_prev[14] !== last_MDM_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[14] = MDM_expected_prev[14];
	end
	if (
		( MDM_expected_prev[15] !== 1'bx ) && ( MDM_prev[15] !== MDM_expected_prev[15] )
		&& ((MDM_expected_prev[15] !== last_MDM_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDM_expected_prev);
		$display ("     Real value = %b", MDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MDM_exp[15] = MDM_expected_prev[15];
	end
	if (
		( Read_Mp_expected_prev !== 1'bx ) && ( Read_Mp_prev !== Read_Mp_expected_prev )
		&& ((Read_Mp_expected_prev !== last_Read_Mp_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Mp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Mp_expected_prev);
		$display ("     Real value = %b", Read_Mp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Read_Mp_exp = Read_Mp_expected_prev;
	end
	if (
		( RW_Md_expected_prev !== 1'bx ) && ( RW_Md_prev !== RW_Md_expected_prev )
		&& ((RW_Md_expected_prev !== last_RW_Md_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RW_Md :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RW_Md_expected_prev);
		$display ("     Real value = %b", RW_Md_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RW_Md_exp = RW_Md_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Procesador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [22:0] Dato_Mp;
reg [15:0] Datoin_Md;
reg Int;
reg ResetSystem;
// wires                                               
wire [15:0] Count;
wire [15:0] Dataout_Md;
wire [15:0] Dir_Mp;
wire Ena_Md;
wire Ena_Mp;
wire [5:0] Estados;
wire [15:0] MDM;
wire Read_Mp;
wire RW_Md;

wire sampler;                             

// assign statements (if any)                          
Procesador i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Count(Count),
	.Dataout_Md(Dataout_Md),
	.Dato_Mp(Dato_Mp),
	.Datoin_Md(Datoin_Md),
	.Dir_Mp(Dir_Mp),
	.Ena_Md(Ena_Md),
	.Ena_Mp(Ena_Mp),
	.Estados(Estados),
	.\Int (Int),
	.MDM(MDM),
	.Read_Mp(Read_Mp),
	.ResetSystem(ResetSystem),
	.RW_Md(RW_Md)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// ResetSystem
initial
begin
	ResetSystem = 1'b1;
end 
// Dato_Mp[ 22 ]
initial
begin
	Dato_Mp[22] = 1'b0;
end 
// Dato_Mp[ 21 ]
initial
begin
	Dato_Mp[21] = 1'b0;
end 
// Dato_Mp[ 20 ]
initial
begin
	Dato_Mp[20] = 1'b0;
end 
// Dato_Mp[ 19 ]
initial
begin
	Dato_Mp[19] = 1'b0;
end 
// Dato_Mp[ 18 ]
initial
begin
	Dato_Mp[18] = 1'b0;
end 
// Dato_Mp[ 17 ]
initial
begin
	Dato_Mp[17] = 1'b0;
end 
// Dato_Mp[ 16 ]
initial
begin
	Dato_Mp[16] = 1'b0;
end 
// Dato_Mp[ 15 ]
initial
begin
	Dato_Mp[15] = 1'b0;
end 
// Dato_Mp[ 14 ]
initial
begin
	Dato_Mp[14] = 1'b0;
end 
// Dato_Mp[ 13 ]
initial
begin
	Dato_Mp[13] = 1'b0;
end 
// Dato_Mp[ 12 ]
initial
begin
	Dato_Mp[12] = 1'b0;
end 
// Dato_Mp[ 11 ]
initial
begin
	Dato_Mp[11] = 1'b0;
end 
// Dato_Mp[ 10 ]
initial
begin
	Dato_Mp[10] = 1'b0;
end 
// Dato_Mp[ 9 ]
initial
begin
	Dato_Mp[9] = 1'b0;
end 
// Dato_Mp[ 8 ]
initial
begin
	Dato_Mp[8] = 1'b0;
end 
// Dato_Mp[ 7 ]
initial
begin
	Dato_Mp[7] = 1'b0;
end 
// Dato_Mp[ 6 ]
initial
begin
	Dato_Mp[6] = 1'b0;
end 
// Dato_Mp[ 5 ]
initial
begin
	Dato_Mp[5] = 1'b0;
end 
// Dato_Mp[ 4 ]
initial
begin
	Dato_Mp[4] = 1'b0;
end 
// Dato_Mp[ 3 ]
initial
begin
	Dato_Mp[3] = 1'b0;
end 
// Dato_Mp[ 2 ]
initial
begin
	Dato_Mp[2] = 1'b0;
end 
// Dato_Mp[ 1 ]
initial
begin
	Dato_Mp[1] = 1'b0;
end 
// Dato_Mp[ 0 ]
initial
begin
	Dato_Mp[0] = 1'b0;
end 
// Datoin_Md[ 15 ]
initial
begin
	Datoin_Md[15] = 1'b0;
end 
// Datoin_Md[ 14 ]
initial
begin
	Datoin_Md[14] = 1'b0;
end 
// Datoin_Md[ 13 ]
initial
begin
	Datoin_Md[13] = 1'b0;
end 
// Datoin_Md[ 12 ]
initial
begin
	Datoin_Md[12] = 1'b0;
end 
// Datoin_Md[ 11 ]
initial
begin
	Datoin_Md[11] = 1'b0;
end 
// Datoin_Md[ 10 ]
initial
begin
	Datoin_Md[10] = 1'b0;
end 
// Datoin_Md[ 9 ]
initial
begin
	Datoin_Md[9] = 1'b0;
end 
// Datoin_Md[ 8 ]
initial
begin
	Datoin_Md[8] = 1'b0;
end 
// Datoin_Md[ 7 ]
initial
begin
	Datoin_Md[7] = 1'b0;
end 
// Datoin_Md[ 6 ]
initial
begin
	Datoin_Md[6] = 1'b0;
end 
// Datoin_Md[ 5 ]
initial
begin
	Datoin_Md[5] = 1'b0;
end 
// Datoin_Md[ 4 ]
initial
begin
	Datoin_Md[4] = 1'b0;
end 
// Datoin_Md[ 3 ]
initial
begin
	Datoin_Md[3] = 1'b0;
end 
// Datoin_Md[ 2 ]
initial
begin
	Datoin_Md[2] = 1'b0;
end 
// Datoin_Md[ 1 ]
initial
begin
	Datoin_Md[1] = 1'b0;
end 
// Datoin_Md[ 0 ]
initial
begin
	Datoin_Md[0] = 1'b0;
end 

// Int
initial
begin
	Int = 1'b0;
end 

Procesador_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Dato_Mp(Dato_Mp),
	.Datoin_Md(Datoin_Md),
	.Int(Int),
	.ResetSystem(ResetSystem),
	.sampler_tx(sampler)
);

Procesador_vlg_check_tst tb_out(
	.Count(Count),
	.Dataout_Md(Dataout_Md),
	.Dir_Mp(Dir_Mp),
	.Ena_Md(Ena_Md),
	.Ena_Mp(Ena_Mp),
	.Estados(Estados),
	.MDM(MDM),
	.Read_Mp(Read_Mp),
	.RW_Md(RW_Md),
	.sampler_rx(sampler)
);
endmodule

