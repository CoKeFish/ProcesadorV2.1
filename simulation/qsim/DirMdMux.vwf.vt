// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2020 02:35:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DirMdMux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DirMdMux_vlg_sample_tst(
	DirROut,
	GPROut,
	SelectDir,
	SPOut,
	sampler_tx
);
input [15:0] DirROut;
input [15:0] GPROut;
input [1:0] SelectDir;
input [15:0] SPOut;
output sampler_tx;

reg sample;
time current_time;
always @(DirROut or GPROut or SelectDir or SPOut)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DirMdMux_vlg_check_tst (
	DirMd,
	sampler_rx
);
input [15:0] DirMd;
input sampler_rx;

reg [15:0] DirMd_expected;

reg [15:0] DirMd_prev;

reg [15:0] DirMd_expected_prev;

reg [15:0] last_DirMd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DirMd_prev = DirMd;
end

// update expected /o prevs

always @(trigger)
begin
	DirMd_expected_prev = DirMd_expected;
end


// expected DirMd[ 15 ]
initial
begin
	DirMd_expected[15] = 1'bX;
end 
// expected DirMd[ 14 ]
initial
begin
	DirMd_expected[14] = 1'bX;
end 
// expected DirMd[ 13 ]
initial
begin
	DirMd_expected[13] = 1'bX;
end 
// expected DirMd[ 12 ]
initial
begin
	DirMd_expected[12] = 1'bX;
end 
// expected DirMd[ 11 ]
initial
begin
	DirMd_expected[11] = 1'bX;
end 
// expected DirMd[ 10 ]
initial
begin
	DirMd_expected[10] = 1'bX;
end 
// expected DirMd[ 9 ]
initial
begin
	DirMd_expected[9] = 1'bX;
end 
// expected DirMd[ 8 ]
initial
begin
	DirMd_expected[8] = 1'bX;
end 
// expected DirMd[ 7 ]
initial
begin
	DirMd_expected[7] = 1'bX;
end 
// expected DirMd[ 6 ]
initial
begin
	DirMd_expected[6] = 1'bX;
end 
// expected DirMd[ 5 ]
initial
begin
	DirMd_expected[5] = 1'bX;
end 
// expected DirMd[ 4 ]
initial
begin
	DirMd_expected[4] = 1'bX;
end 
// expected DirMd[ 3 ]
initial
begin
	DirMd_expected[3] = 1'bX;
end 
// expected DirMd[ 2 ]
initial
begin
	DirMd_expected[2] = 1'bX;
end 
// expected DirMd[ 1 ]
initial
begin
	DirMd_expected[1] = 1'bX;
end 
// expected DirMd[ 0 ]
initial
begin
	DirMd_expected[0] = 1'bX;
end 
// generate trigger
always @(DirMd_expected or DirMd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DirMd = %b | ",DirMd_expected_prev);
	$display("| real DirMd = %b | ",DirMd_prev);
`endif
	if (
		( DirMd_expected_prev[0] !== 1'bx ) && ( DirMd_prev[0] !== DirMd_expected_prev[0] )
		&& ((DirMd_expected_prev[0] !== last_DirMd_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[0] = DirMd_expected_prev[0];
	end
	if (
		( DirMd_expected_prev[1] !== 1'bx ) && ( DirMd_prev[1] !== DirMd_expected_prev[1] )
		&& ((DirMd_expected_prev[1] !== last_DirMd_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[1] = DirMd_expected_prev[1];
	end
	if (
		( DirMd_expected_prev[2] !== 1'bx ) && ( DirMd_prev[2] !== DirMd_expected_prev[2] )
		&& ((DirMd_expected_prev[2] !== last_DirMd_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[2] = DirMd_expected_prev[2];
	end
	if (
		( DirMd_expected_prev[3] !== 1'bx ) && ( DirMd_prev[3] !== DirMd_expected_prev[3] )
		&& ((DirMd_expected_prev[3] !== last_DirMd_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[3] = DirMd_expected_prev[3];
	end
	if (
		( DirMd_expected_prev[4] !== 1'bx ) && ( DirMd_prev[4] !== DirMd_expected_prev[4] )
		&& ((DirMd_expected_prev[4] !== last_DirMd_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[4] = DirMd_expected_prev[4];
	end
	if (
		( DirMd_expected_prev[5] !== 1'bx ) && ( DirMd_prev[5] !== DirMd_expected_prev[5] )
		&& ((DirMd_expected_prev[5] !== last_DirMd_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[5] = DirMd_expected_prev[5];
	end
	if (
		( DirMd_expected_prev[6] !== 1'bx ) && ( DirMd_prev[6] !== DirMd_expected_prev[6] )
		&& ((DirMd_expected_prev[6] !== last_DirMd_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[6] = DirMd_expected_prev[6];
	end
	if (
		( DirMd_expected_prev[7] !== 1'bx ) && ( DirMd_prev[7] !== DirMd_expected_prev[7] )
		&& ((DirMd_expected_prev[7] !== last_DirMd_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[7] = DirMd_expected_prev[7];
	end
	if (
		( DirMd_expected_prev[8] !== 1'bx ) && ( DirMd_prev[8] !== DirMd_expected_prev[8] )
		&& ((DirMd_expected_prev[8] !== last_DirMd_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[8] = DirMd_expected_prev[8];
	end
	if (
		( DirMd_expected_prev[9] !== 1'bx ) && ( DirMd_prev[9] !== DirMd_expected_prev[9] )
		&& ((DirMd_expected_prev[9] !== last_DirMd_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[9] = DirMd_expected_prev[9];
	end
	if (
		( DirMd_expected_prev[10] !== 1'bx ) && ( DirMd_prev[10] !== DirMd_expected_prev[10] )
		&& ((DirMd_expected_prev[10] !== last_DirMd_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[10] = DirMd_expected_prev[10];
	end
	if (
		( DirMd_expected_prev[11] !== 1'bx ) && ( DirMd_prev[11] !== DirMd_expected_prev[11] )
		&& ((DirMd_expected_prev[11] !== last_DirMd_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[11] = DirMd_expected_prev[11];
	end
	if (
		( DirMd_expected_prev[12] !== 1'bx ) && ( DirMd_prev[12] !== DirMd_expected_prev[12] )
		&& ((DirMd_expected_prev[12] !== last_DirMd_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[12] = DirMd_expected_prev[12];
	end
	if (
		( DirMd_expected_prev[13] !== 1'bx ) && ( DirMd_prev[13] !== DirMd_expected_prev[13] )
		&& ((DirMd_expected_prev[13] !== last_DirMd_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[13] = DirMd_expected_prev[13];
	end
	if (
		( DirMd_expected_prev[14] !== 1'bx ) && ( DirMd_prev[14] !== DirMd_expected_prev[14] )
		&& ((DirMd_expected_prev[14] !== last_DirMd_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[14] = DirMd_expected_prev[14];
	end
	if (
		( DirMd_expected_prev[15] !== 1'bx ) && ( DirMd_prev[15] !== DirMd_expected_prev[15] )
		&& ((DirMd_expected_prev[15] !== last_DirMd_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DirMd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DirMd_expected_prev);
		$display ("     Real value = %b", DirMd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DirMd_exp[15] = DirMd_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DirMdMux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] DirROut;
reg [15:0] GPROut;
reg [1:0] SelectDir;
reg [15:0] SPOut;
// wires                                               
wire [15:0] DirMd;

wire sampler;                             

// assign statements (if any)                          
DirMdMux i1 (
// port map - connection between master ports and signals/registers   
	.DirMd(DirMd),
	.DirROut(DirROut),
	.GPROut(GPROut),
	.SelectDir(SelectDir),
	.SPOut(SPOut)
);
// DirROut[ 15 ]
initial
begin
	DirROut[15] = 1'b1;
end 
// DirROut[ 14 ]
initial
begin
	DirROut[14] = 1'b0;
end 
// DirROut[ 13 ]
initial
begin
	DirROut[13] = 1'b0;
end 
// DirROut[ 12 ]
initial
begin
	DirROut[12] = 1'b0;
end 
// DirROut[ 11 ]
initial
begin
	DirROut[11] = 1'b0;
end 
// DirROut[ 10 ]
initial
begin
	DirROut[10] = 1'b0;
end 
// DirROut[ 9 ]
initial
begin
	DirROut[9] = 1'b0;
end 
// DirROut[ 8 ]
initial
begin
	DirROut[8] = 1'b0;
end 
// DirROut[ 7 ]
initial
begin
	DirROut[7] = 1'b0;
end 
// DirROut[ 6 ]
initial
begin
	DirROut[6] = 1'b0;
end 
// DirROut[ 5 ]
initial
begin
	DirROut[5] = 1'b0;
end 
// DirROut[ 4 ]
initial
begin
	DirROut[4] = 1'b0;
end 
// DirROut[ 3 ]
initial
begin
	DirROut[3] = 1'b0;
end 
// DirROut[ 2 ]
initial
begin
	DirROut[2] = 1'b0;
end 
// DirROut[ 1 ]
initial
begin
	DirROut[1] = 1'b0;
end 
// DirROut[ 0 ]
initial
begin
	DirROut[0] = 1'b0;
end 
// GPROut[ 15 ]
initial
begin
	GPROut[15] = 1'b0;
end 
// GPROut[ 14 ]
initial
begin
	GPROut[14] = 1'b0;
end 
// GPROut[ 13 ]
initial
begin
	GPROut[13] = 1'b0;
end 
// GPROut[ 12 ]
initial
begin
	GPROut[12] = 1'b0;
end 
// GPROut[ 11 ]
initial
begin
	GPROut[11] = 1'b0;
end 
// GPROut[ 10 ]
initial
begin
	GPROut[10] = 1'b0;
end 
// GPROut[ 9 ]
initial
begin
	GPROut[9] = 1'b0;
end 
// GPROut[ 8 ]
initial
begin
	GPROut[8] = 1'b0;
end 
// GPROut[ 7 ]
initial
begin
	GPROut[7] = 1'b0;
end 
// GPROut[ 6 ]
initial
begin
	GPROut[6] = 1'b0;
end 
// GPROut[ 5 ]
initial
begin
	GPROut[5] = 1'b0;
end 
// GPROut[ 4 ]
initial
begin
	GPROut[4] = 1'b0;
end 
// GPROut[ 3 ]
initial
begin
	GPROut[3] = 1'b0;
end 
// GPROut[ 2 ]
initial
begin
	GPROut[2] = 1'b0;
end 
// GPROut[ 1 ]
initial
begin
	GPROut[1] = 1'b0;
end 
// GPROut[ 0 ]
initial
begin
	GPROut[0] = 1'b1;
end 
// SelectDir[ 1 ]
initial
begin
	SelectDir[1] = 1'b1;
end 
// SelectDir[ 0 ]
initial
begin
	SelectDir[0] = 1'b0;
end 
// SPOut[ 15 ]
initial
begin
	SPOut[15] = 1'b0;
end 
// SPOut[ 14 ]
initial
begin
	SPOut[14] = 1'b0;
end 
// SPOut[ 13 ]
initial
begin
	SPOut[13] = 1'b0;
end 
// SPOut[ 12 ]
initial
begin
	SPOut[12] = 1'b0;
end 
// SPOut[ 11 ]
initial
begin
	SPOut[11] = 1'b1;
end 
// SPOut[ 10 ]
initial
begin
	SPOut[10] = 1'b1;
end 
// SPOut[ 9 ]
initial
begin
	SPOut[9] = 1'b0;
end 
// SPOut[ 8 ]
initial
begin
	SPOut[8] = 1'b0;
end 
// SPOut[ 7 ]
initial
begin
	SPOut[7] = 1'b0;
end 
// SPOut[ 6 ]
initial
begin
	SPOut[6] = 1'b0;
end 
// SPOut[ 5 ]
initial
begin
	SPOut[5] = 1'b0;
end 
// SPOut[ 4 ]
initial
begin
	SPOut[4] = 1'b0;
end 
// SPOut[ 3 ]
initial
begin
	SPOut[3] = 1'b0;
end 
// SPOut[ 2 ]
initial
begin
	SPOut[2] = 1'b0;
end 
// SPOut[ 1 ]
initial
begin
	SPOut[1] = 1'b0;
end 
// SPOut[ 0 ]
initial
begin
	SPOut[0] = 1'b0;
end 

DirMdMux_vlg_sample_tst tb_sample (
	.DirROut(DirROut),
	.GPROut(GPROut),
	.SelectDir(SelectDir),
	.SPOut(SPOut),
	.sampler_tx(sampler)
);

DirMdMux_vlg_check_tst tb_out(
	.DirMd(DirMd),
	.sampler_rx(sampler)
);
endmodule

