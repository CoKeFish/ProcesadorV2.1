// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2020 00:11:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALUMux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALUMux_vlg_sample_tst(
	AC_Out,
	DataGPR,
	Datoin_Md,
	Ena_AcALU,
	SelectALU,
	sampler_tx
);
input [15:0] AC_Out;
input [15:0] DataGPR;
input [15:0] Datoin_Md;
input  Ena_AcALU;
input  SelectALU;
output sampler_tx;

reg sample;
time current_time;
always @(AC_Out or DataGPR or Datoin_Md or Ena_AcALU or SelectALU)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALUMux_vlg_check_tst (
	ALUMUXOut,
	sampler_rx
);
input [15:0] ALUMUXOut;
input sampler_rx;

reg [15:0] ALUMUXOut_expected;

reg [15:0] ALUMUXOut_prev;

reg [15:0] ALUMUXOut_expected_prev;

reg [15:0] last_ALUMUXOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUMUXOut_prev = ALUMUXOut;
end

// update expected /o prevs

always @(trigger)
begin
	ALUMUXOut_expected_prev = ALUMUXOut_expected;
end


// expected ALUMUXOut[ 15 ]
initial
begin
	ALUMUXOut_expected[15] = 1'bX;
end 
// expected ALUMUXOut[ 14 ]
initial
begin
	ALUMUXOut_expected[14] = 1'bX;
end 
// expected ALUMUXOut[ 13 ]
initial
begin
	ALUMUXOut_expected[13] = 1'bX;
end 
// expected ALUMUXOut[ 12 ]
initial
begin
	ALUMUXOut_expected[12] = 1'bX;
end 
// expected ALUMUXOut[ 11 ]
initial
begin
	ALUMUXOut_expected[11] = 1'bX;
end 
// expected ALUMUXOut[ 10 ]
initial
begin
	ALUMUXOut_expected[10] = 1'bX;
end 
// expected ALUMUXOut[ 9 ]
initial
begin
	ALUMUXOut_expected[9] = 1'bX;
end 
// expected ALUMUXOut[ 8 ]
initial
begin
	ALUMUXOut_expected[8] = 1'bX;
end 
// expected ALUMUXOut[ 7 ]
initial
begin
	ALUMUXOut_expected[7] = 1'bX;
end 
// expected ALUMUXOut[ 6 ]
initial
begin
	ALUMUXOut_expected[6] = 1'bX;
end 
// expected ALUMUXOut[ 5 ]
initial
begin
	ALUMUXOut_expected[5] = 1'bX;
end 
// expected ALUMUXOut[ 4 ]
initial
begin
	ALUMUXOut_expected[4] = 1'bX;
end 
// expected ALUMUXOut[ 3 ]
initial
begin
	ALUMUXOut_expected[3] = 1'bX;
end 
// expected ALUMUXOut[ 2 ]
initial
begin
	ALUMUXOut_expected[2] = 1'bX;
end 
// expected ALUMUXOut[ 1 ]
initial
begin
	ALUMUXOut_expected[1] = 1'bX;
end 
// expected ALUMUXOut[ 0 ]
initial
begin
	ALUMUXOut_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUMUXOut_expected or ALUMUXOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUMUXOut = %b | ",ALUMUXOut_expected_prev);
	$display("| real ALUMUXOut = %b | ",ALUMUXOut_prev);
`endif
	if (
		( ALUMUXOut_expected_prev[0] !== 1'bx ) && ( ALUMUXOut_prev[0] !== ALUMUXOut_expected_prev[0] )
		&& ((ALUMUXOut_expected_prev[0] !== last_ALUMUXOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[0] = ALUMUXOut_expected_prev[0];
	end
	if (
		( ALUMUXOut_expected_prev[1] !== 1'bx ) && ( ALUMUXOut_prev[1] !== ALUMUXOut_expected_prev[1] )
		&& ((ALUMUXOut_expected_prev[1] !== last_ALUMUXOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[1] = ALUMUXOut_expected_prev[1];
	end
	if (
		( ALUMUXOut_expected_prev[2] !== 1'bx ) && ( ALUMUXOut_prev[2] !== ALUMUXOut_expected_prev[2] )
		&& ((ALUMUXOut_expected_prev[2] !== last_ALUMUXOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[2] = ALUMUXOut_expected_prev[2];
	end
	if (
		( ALUMUXOut_expected_prev[3] !== 1'bx ) && ( ALUMUXOut_prev[3] !== ALUMUXOut_expected_prev[3] )
		&& ((ALUMUXOut_expected_prev[3] !== last_ALUMUXOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[3] = ALUMUXOut_expected_prev[3];
	end
	if (
		( ALUMUXOut_expected_prev[4] !== 1'bx ) && ( ALUMUXOut_prev[4] !== ALUMUXOut_expected_prev[4] )
		&& ((ALUMUXOut_expected_prev[4] !== last_ALUMUXOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[4] = ALUMUXOut_expected_prev[4];
	end
	if (
		( ALUMUXOut_expected_prev[5] !== 1'bx ) && ( ALUMUXOut_prev[5] !== ALUMUXOut_expected_prev[5] )
		&& ((ALUMUXOut_expected_prev[5] !== last_ALUMUXOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[5] = ALUMUXOut_expected_prev[5];
	end
	if (
		( ALUMUXOut_expected_prev[6] !== 1'bx ) && ( ALUMUXOut_prev[6] !== ALUMUXOut_expected_prev[6] )
		&& ((ALUMUXOut_expected_prev[6] !== last_ALUMUXOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[6] = ALUMUXOut_expected_prev[6];
	end
	if (
		( ALUMUXOut_expected_prev[7] !== 1'bx ) && ( ALUMUXOut_prev[7] !== ALUMUXOut_expected_prev[7] )
		&& ((ALUMUXOut_expected_prev[7] !== last_ALUMUXOut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[7] = ALUMUXOut_expected_prev[7];
	end
	if (
		( ALUMUXOut_expected_prev[8] !== 1'bx ) && ( ALUMUXOut_prev[8] !== ALUMUXOut_expected_prev[8] )
		&& ((ALUMUXOut_expected_prev[8] !== last_ALUMUXOut_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[8] = ALUMUXOut_expected_prev[8];
	end
	if (
		( ALUMUXOut_expected_prev[9] !== 1'bx ) && ( ALUMUXOut_prev[9] !== ALUMUXOut_expected_prev[9] )
		&& ((ALUMUXOut_expected_prev[9] !== last_ALUMUXOut_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[9] = ALUMUXOut_expected_prev[9];
	end
	if (
		( ALUMUXOut_expected_prev[10] !== 1'bx ) && ( ALUMUXOut_prev[10] !== ALUMUXOut_expected_prev[10] )
		&& ((ALUMUXOut_expected_prev[10] !== last_ALUMUXOut_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[10] = ALUMUXOut_expected_prev[10];
	end
	if (
		( ALUMUXOut_expected_prev[11] !== 1'bx ) && ( ALUMUXOut_prev[11] !== ALUMUXOut_expected_prev[11] )
		&& ((ALUMUXOut_expected_prev[11] !== last_ALUMUXOut_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[11] = ALUMUXOut_expected_prev[11];
	end
	if (
		( ALUMUXOut_expected_prev[12] !== 1'bx ) && ( ALUMUXOut_prev[12] !== ALUMUXOut_expected_prev[12] )
		&& ((ALUMUXOut_expected_prev[12] !== last_ALUMUXOut_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[12] = ALUMUXOut_expected_prev[12];
	end
	if (
		( ALUMUXOut_expected_prev[13] !== 1'bx ) && ( ALUMUXOut_prev[13] !== ALUMUXOut_expected_prev[13] )
		&& ((ALUMUXOut_expected_prev[13] !== last_ALUMUXOut_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[13] = ALUMUXOut_expected_prev[13];
	end
	if (
		( ALUMUXOut_expected_prev[14] !== 1'bx ) && ( ALUMUXOut_prev[14] !== ALUMUXOut_expected_prev[14] )
		&& ((ALUMUXOut_expected_prev[14] !== last_ALUMUXOut_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[14] = ALUMUXOut_expected_prev[14];
	end
	if (
		( ALUMUXOut_expected_prev[15] !== 1'bx ) && ( ALUMUXOut_prev[15] !== ALUMUXOut_expected_prev[15] )
		&& ((ALUMUXOut_expected_prev[15] !== last_ALUMUXOut_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUMUXOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUMUXOut_expected_prev);
		$display ("     Real value = %b", ALUMUXOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUMUXOut_exp[15] = ALUMUXOut_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALUMux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] AC_Out;
reg [15:0] DataGPR;
reg [15:0] Datoin_Md;
reg Ena_AcALU;
reg SelectALU;
// wires                                               
wire [15:0] ALUMUXOut;

wire sampler;                             

// assign statements (if any)                          
ALUMux i1 (
// port map - connection between master ports and signals/registers   
	.AC_Out(AC_Out),
	.ALUMUXOut(ALUMUXOut),
	.DataGPR(DataGPR),
	.Datoin_Md(Datoin_Md),
	.Ena_AcALU(Ena_AcALU),
	.SelectALU(SelectALU)
);

// SelectALU
initial
begin
	SelectALU = 1'b0;
	SelectALU = #510000 1'b1;
	SelectALU = #90000 1'b0;
end 

// Ena_AcALU
initial
begin
	Ena_AcALU = 1'b0;
	Ena_AcALU = #40000 1'b1;
	Ena_AcALU = #200000 1'b0;
end 
// AC_Out[ 15 ]
initial
begin
	AC_Out[15] = 1'b0;
end 
// AC_Out[ 14 ]
initial
begin
	AC_Out[14] = 1'b0;
end 
// AC_Out[ 13 ]
initial
begin
	AC_Out[13] = 1'b0;
end 
// AC_Out[ 12 ]
initial
begin
	AC_Out[12] = 1'b0;
end 
// AC_Out[ 11 ]
initial
begin
	AC_Out[11] = 1'b0;
end 
// AC_Out[ 10 ]
initial
begin
	AC_Out[10] = 1'b0;
end 
// AC_Out[ 9 ]
initial
begin
	AC_Out[9] = 1'b0;
end 
// AC_Out[ 8 ]
initial
begin
	AC_Out[8] = 1'b0;
end 
// AC_Out[ 7 ]
initial
begin
	AC_Out[7] = 1'b0;
end 
// AC_Out[ 6 ]
initial
begin
	AC_Out[6] = 1'b0;
end 
// AC_Out[ 5 ]
initial
begin
	AC_Out[5] = 1'b0;
end 
// AC_Out[ 4 ]
initial
begin
	AC_Out[4] = 1'b0;
end 
// AC_Out[ 3 ]
initial
begin
	AC_Out[3] = 1'b0;
end 
// AC_Out[ 2 ]
initial
begin
	AC_Out[2] = 1'b1;
end 
// AC_Out[ 1 ]
initial
begin
	AC_Out[1] = 1'b1;
end 
// AC_Out[ 0 ]
initial
begin
	AC_Out[0] = 1'b1;
end 
// DataGPR[ 15 ]
initial
begin
	DataGPR[15] = 1'b1;
end 
// DataGPR[ 14 ]
initial
begin
	DataGPR[14] = 1'b1;
end 
// DataGPR[ 13 ]
initial
begin
	DataGPR[13] = 1'b0;
end 
// DataGPR[ 12 ]
initial
begin
	DataGPR[12] = 1'b0;
end 
// DataGPR[ 11 ]
initial
begin
	DataGPR[11] = 1'b0;
end 
// DataGPR[ 10 ]
initial
begin
	DataGPR[10] = 1'b0;
end 
// DataGPR[ 9 ]
initial
begin
	DataGPR[9] = 1'b0;
end 
// DataGPR[ 8 ]
initial
begin
	DataGPR[8] = 1'b0;
end 
// DataGPR[ 7 ]
initial
begin
	DataGPR[7] = 1'b0;
end 
// DataGPR[ 6 ]
initial
begin
	DataGPR[6] = 1'b0;
end 
// DataGPR[ 5 ]
initial
begin
	DataGPR[5] = 1'b0;
end 
// DataGPR[ 4 ]
initial
begin
	DataGPR[4] = 1'b0;
end 
// DataGPR[ 3 ]
initial
begin
	DataGPR[3] = 1'b0;
end 
// DataGPR[ 2 ]
initial
begin
	DataGPR[2] = 1'b0;
end 
// DataGPR[ 1 ]
initial
begin
	DataGPR[1] = 1'b0;
end 
// DataGPR[ 0 ]
initial
begin
	DataGPR[0] = 1'b0;
end 
// Datoin_Md[ 15 ]
initial
begin
	Datoin_Md[15] = 1'b0;
end 
// Datoin_Md[ 14 ]
initial
begin
	Datoin_Md[14] = 1'b0;
end 
// Datoin_Md[ 13 ]
initial
begin
	Datoin_Md[13] = 1'b0;
end 
// Datoin_Md[ 12 ]
initial
begin
	Datoin_Md[12] = 1'b0;
end 
// Datoin_Md[ 11 ]
initial
begin
	Datoin_Md[11] = 1'b0;
end 
// Datoin_Md[ 10 ]
initial
begin
	Datoin_Md[10] = 1'b1;
end 
// Datoin_Md[ 9 ]
initial
begin
	Datoin_Md[9] = 1'b1;
end 
// Datoin_Md[ 8 ]
initial
begin
	Datoin_Md[8] = 1'b1;
end 
// Datoin_Md[ 7 ]
initial
begin
	Datoin_Md[7] = 1'b1;
end 
// Datoin_Md[ 6 ]
initial
begin
	Datoin_Md[6] = 1'b0;
end 
// Datoin_Md[ 5 ]
initial
begin
	Datoin_Md[5] = 1'b0;
end 
// Datoin_Md[ 4 ]
initial
begin
	Datoin_Md[4] = 1'b0;
end 
// Datoin_Md[ 3 ]
initial
begin
	Datoin_Md[3] = 1'b0;
end 
// Datoin_Md[ 2 ]
initial
begin
	Datoin_Md[2] = 1'b0;
end 
// Datoin_Md[ 1 ]
initial
begin
	Datoin_Md[1] = 1'b0;
end 
// Datoin_Md[ 0 ]
initial
begin
	Datoin_Md[0] = 1'b0;
end 

ALUMux_vlg_sample_tst tb_sample (
	.AC_Out(AC_Out),
	.DataGPR(DataGPR),
	.Datoin_Md(Datoin_Md),
	.Ena_AcALU(Ena_AcALU),
	.SelectALU(SelectALU),
	.sampler_tx(sampler)
);

ALUMux_vlg_check_tst tb_out(
	.ALUMUXOut(ALUMUXOut),
	.sampler_rx(sampler)
);
endmodule

